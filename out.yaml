---
# Source: hlf-k8s/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orderer1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
---
# Source: hlf-k8s/charts/hlf-ord/templates/configmap--ord.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer1-hlf-ord--ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer1"
    chart: hlf-ord-3.0.1
data:
  ## Location where fabric-ca-client configuration is saved
  FABRIC_CA_CLIENT_HOME: /var/hyperledger/fabric-ca-client
  ## Orderer defaults
  ORDERER_CFG_PATH: /var/hyperledger/config
  ORDERER_GENERAL_LEDGERTYPE: file
  ORDERER_FILELEDGER_LOCATION: /var/hyperledger/ledger
  ORDERER_GENERAL_BATCHTIMEOUT: 1s
  ORDERER_GENERAL_BATCHSIZE_MAXMESSAGECOUNT: "10"
  ORDERER_GENERAL_MAXWINDOWSIZE: "1000"
  ORDERER_GENERAL_ORDERERTYPE: "etcdraft"
  ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
  ORDERER_GENERAL_LISTENPORT: "7050"
  ORDERER_GENERAL_LOGLEVEL: debug
  ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/msp
  ORDERER_GENERAL_LOCALMSPID: "MyOrdererMSP"
  ORDERER_GENERAL_GENESISMETHOD: file
  ORDERER_GENERAL_GENESISFILE: /hl_config/genesis/genesis.block
  ORDERER_GENERAL_GENESISPROFILE: initial
  ORDERER_GENERAL_TLS_ENABLED: "true"
  ORDERER_GENERAL_TLS_CERTIFICATE: "/var/hyperledger/tls/server/pair/tls.crt"
  ORDERER_GENERAL_TLS_PRIVATEKEY: "/var/hyperledger/tls/server/pair/tls.key"
  ORDERER_GENERAL_TLS_ROOTCAS: "/var/hyperledger/tls/server/cert/cacert.pem"
  ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED: "true"
  # This is fixed prior to starting the orderer
  ORDERER_GENERAL_TLS_CLIENTROOTCAS: "/var/hyperledger/tls/client/cert/*"
  ORDERER_GENERAL_TLS_CLIENTCERT_FILE: "/var/hyperledger/tls/client/pair/tls.crt"
  ORDERER_GENERAL_TLS_CLIENTKEY_FILE: "/var/hyperledger/tls/client/pair/tls.key"
  GODEBUG: "netdns=go"
  ADMIN_MSP_PATH: /var/hyperledger/admin_msp
  ##############
  # Operations #
  ##############
  ###########
  # Metrics #
  ###########
  ORDERER_METRICS_PROVIDER: "disabled"
---
# Source: hlf-k8s/templates/configmap-enrollment.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer1-hlf-k8s-enrollment
data:
  enrollments: |
---
# Source: hlf-k8s/templates/configmap-fabric.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer1-hlf-k8s-fabric
data:
  discoverConfig.yaml: |
    version: 0
    tlsconfig:
      certpath: /var/hyperledger/tls/client/pair/tls.crt
      keypath: /var/hyperledger/tls/client/pair/tls.key
      peercacertpath: /var/hyperledger/tls/server/cert/cacert.pem
      timeout: 0s
    signerconfig:
      mspid: MyOrdererMSP
      identitypath: /var/hyperledger/msp/signcerts/cert.pem
      keypath: /var/hyperledger/msp/keystore/key.pem
  configtx.yaml: |
    Organizations:
    - &id001
      Name: MyOrderer
      ID: MyOrdererMSP
      MSPDir: /var/hyperledger/admin_msp

      Policies: &id002
        Readers:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
        Writers:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
        Admins:
            Type: Signature
            Rule: "OR('MyOrdererMSP.admin')"
        Endorsement:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
      OrdererEndpoints:
      - "orderer1-hlf-ord.orderer:7050"

    Capabilities:
      Channel: &ChannelCapabilities
          V2_0: true

      Orderer: &OrdererCapabilities
          V2_0: true

      Application: &ApplicationCapabilities
          V2_0: true

    Application: &ApplicationDefaults

      Organizations: null

      Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"

      Capabilities:
          <<: *ApplicationCapabilities

    Profiles:
      GenerateGenesis:
        Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "MAJORITY Admins"
        Capabilities:
          V2_0: true
        Consortiums:
          SampleConsortium:
            Organizations: *id001
        Orderer:
          Addresses:
          - orderer1-hlf-ord.orderer:7050
          EtcdRaft:
            Consenters:
            - Host: orderer1-hlf-ord.orderer
              Port: 7050
              ClientTLSCert: /var/hyperledger/tls/client/pair/tls.crt
              ServerTLSCert: /var/hyperledger/tls/server/pair/tls.crt
          BatchSize:
            AbsoluteMaxBytes: 99 MB
            MaxMessageCount: 10
            PreferredMaxBytes: 512 KB
          BatchTimeout: 500ms
          OrdererType: etcdraft
          Organizations:
          - *id001
          Capabilities:
            V2_0: true
          Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "MAJORITY Admins"
            BlockValidation:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            

  core.yaml: |
    chaincode:
      builder: hyperledger/fabric-ccenv:2.2.1
      golang:
          runtime: hyperledger/fabric-baseos:2.2.1
      externalBuilders:
        - name: external-builder
          path: /builders
    peer:
      BCCSP:
        Default: SW
        PKCS11:
          FileKeyStore:
            KeyStore: null
          Hash: null
          Label: null
          Library: null
          Pin: null
          Security: null
        SW:
          FileKeyStore:
            KeyStore: null
          Hash: SHA2
          Security: 256
      address: orderer1-hlf-ord.orderer:7050
      addressAutoDetect: false
      adminService: null
      authentication:
        timewindow: 15m
      client:
        connTimeout: 3s
      deliveryclient:
        connTimeout: 3s
        reConnectBackoffThreshold: 3600s
        reconnectTotalTimeThreshold: 3600s
      discovery:
        authCacheEnabled: true
        authCacheMaxSize: 1000
        authCachePurgeRetentionRatio: 0.75
        enabled: true
        orgMembersAllowedAccess: false
      fileSystemPath: /var/hyperledger/production
      gomaxprocs: -1
      gossip:
        aliveExpirationTimeout: 25s
        aliveTimeInterval: 5s
        bootstrap: 127.0.0.1:7051
        connTimeout: 2s
        dialTimeout: 3s
        digestWaitTime: 1s
        election:
          leaderAliveThreshold: 10s
          leaderElectionDuration: 5s
          membershipSampleInterval: 1s
          startupGracePeriod: 15s
        endpoint: null
        externalEndpoint: orderer1-hlf-ord.orderer:7050
        maxBlockCountToStore: 100
        maxPropagationBurstLatency: 10ms
        maxPropagationBurstSize: 10
        membershipTrackerInterval: 5s
        orgLeader: 'false'
        propagateIterations: 1
        propagatePeerNum: 3
        publishCertPeriod: 10s
        publishStateInfoInterval: 4s
        pullInterval: 4s
        pullPeerNum: 3
        pvtData:
          btlPullMargin: 10
          pullRetryThreshold: 60s
          pushAckTimeout: 3s
          reconcileBatchSize: 10
          reconcileSleepInterval: 1m
          reconciliationEnabled: true
          transientstoreMaxBlockRetention: 1000
        reconnectInterval: 25s
        recvBuffSize: 20
        requestStateInfoInterval: 4s
        requestWaitTime: 1500ms
        responseWaitTime: 2s
        sendBuffSize: 200
        skipBlockVerification: false
        skipHandshake: 'true'
        stateInfoRetentionInterval: null
        useLeaderElection: 'true'
      handlers:
        authFilters:
        - name: DefaultAuth
        - name: ExpirationCheck
        decorators:
        - name: DefaultDecorator
        endorsers:
          escc:
            library: null
            name: DefaultEndorsement
        validators:
          vscc:
            library: null
            name: DefaultValidation
      id: MyOrderer
      keepalive:
        client:
          interval: 60s
          timeout: 20s
        deliveryClient:
          interval: 60s
          timeout: 20s
        minInterval: 60s
      listenAddress: 0.0.0.0:7051
      localMspId: MyOrdererMSP
      localMspType: bccsp
      mspConfigPath: /var/hyperledger/admin_msp
      networkId: dev
      profile:
        enabled: false
        listenAddress: 0.0.0.0:6060
      tls:
        enabled: 'true'
        cert:
          file: /var/hyperledger/tls/server/pair/tls.crt
        key:
          file: /var/hyperledger/tls/server/pair/tls.key
        clientAuthRequired: 'true'
        clientCert:
          file: /var/hyperledger/tls/client/pair/tls.crt
        clientKey:
          file: /var/hyperledger/tls/client/pair/tls.key
        clientRootCAs:
        - /var/hyperledger/admin_msp/cacerts/cacert.pem
        rootcert:
          file: /var/hyperledger/admin_msp/cacerts/cacert.pem
      validatorPoolSize: null
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer1-hlf-k8s-system-organizations
data:
  system-organizations: |
      MyOrg1 MyOrg1MSP org-1-peer-1-hlf-k8s-config-operator.org-1/config/configOrg.json
      MyOrg2 MyOrg2MSP org-2-peer-1-hlf-k8s-config-operator.org-2/config/configOrg.json
---
# Source: hlf-k8s/templates/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orderer1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs:
    - get
    - watch
    - list
    - create
    - delete
---
# Source: hlf-k8s/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orderer1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
subjects:
- kind: ServiceAccount
  name: orderer1-hlf-k8s
  namespace: orderer
roleRef:
  kind: Role
  name: orderer1-hlf-k8s
  apiGroup: rbac.authorization.k8s.io
---
# Source: hlf-k8s/charts/hlf-ord/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orderer1-hlf-ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer1"
    chart: hlf-ord-3.0.1
spec:
  type: ClusterIP
  ports:
    - port: 7050
      targetPort: 7050
      protocol: TCP
      name: grpc
  selector:
    app: hlf-ord
    release: orderer1
---
# Source: hlf-k8s/charts/hlf-ord/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer1-hlf-ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer1"
    chart: hlf-ord-3.0.1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-ord
      release: orderer1
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-ord
        heritage: "Helm"
        release: "orderer1"
        chart: hlf-ord-3.0.1
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: genesis
          secret:
            secretName: hlf-genesis
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
      containers:
        - name: orderer
          image: "hyperledger/fabric-orderer:2.2.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: ord-port
              containerPort: 7050
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 5
            periodSeconds: 5
          # TODO: Improve readiness probe (ideally `ps aux | awk '$11=="orderer"'`)
          readinessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 15
          command:
            - sh
            - -c
            - |

              while [ ! -d /var/hyperledger/admin_msp/admincerts ] || [ -z "$(ls -A /var/hyperledger/admin_msp/admincerts)" ];
              do
                echo "\033[0;31m /var/hyperledger/admin_msp/admincerts must contain Ord admin certificates files \033[0m"
                sleep 60
              done

              while [ ! -d /hl_config/genesis ] || [ -z "$(ls -A /hl_config/genesis)" ];
              do
                echo "\033[0;31m /hl_config/genesis must contain Genesis transaction \033[0m"
                sleep 60
              done

              while [ ! -d ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts ];
              do
                echo "\033[0;31m ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts directory must exist \033[0m"
                sleep 60
              done

              echo "\033[0;32m Create ${ORDERER_FILELEDGER_LOCATION} directory to avoid restarts \033[0m"
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}/index

              if [ $ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED ]
              then
                export ORDERER_GENERAL_TLS_CLIENTROOTCAS=$(echo $(ls $ORDERER_GENERAL_TLS_CLIENTROOTCAS) | echo "[$(sed 's/ /,/g')]")
              fi

              echo ">\033[0;35m orderer \033[0m"
              orderer
          envFrom:
            - configMapRef:
                name: orderer1-hlf-ord--ord
          volumeMounts:
            - mountPath: /var/hyperledger
              name: data
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /hl_config/genesis
              name: genesis
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
          resources:
            {}
---
# Source: hlf-k8s/templates/deployment-genesis-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer1-hlf-k8s-genesis-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s-genesis-operator
    app.kubernetes.io/part-of: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-genesis-operator
        app.kubernetes.io/instance: orderer1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-genesis-operator
        app.kubernetes.io/instance: orderer1
    spec:
      serviceAccountName: orderer1-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            while true; do

                ## Generate Genesis block
                until [ -f "genesis.block" ] ; do
                    printf "[DEBUG] Generating genesis block\n"
                    configtxgen -profile GenerateGenesis -channelID systemchannel -outputBlock genesis.block --configPath /etc/hyperledger/fabric
                    sleep 1
                done

                ## Create genesis block kubernetes secret
                until kubectl get secret hlf-genesis > /dev/null; do
                    printf "[DEBUG] Genesis block kubernetes secret not found, creating it now:\n"
                    kubectl create secret generic hlf-genesis --from-file=genesis.block
                    sleep 1
                done

                printf "[DEBUG] All done. Looping...\n"
                sleep 10
            done
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
        - mountPath: /etc/hyperledger/fabric
          name: fabric-config
          readOnly: true
        - mountPath: /var/hyperledger/msp/signcerts
          name: id-cert
        - mountPath: /var/hyperledger/msp/keystore
          name: id-key
        - mountPath: /var/hyperledger/msp/cacerts
          name: cacert
        - mountPath: /var/hyperledger/msp/tlscacerts
          name: cacert
        - mountPath: /var/hyperledger/msp/admincerts
          name: admin-cert
        - mountPath: /var/hyperledger/tls/server/pair
          name: tls
        - mountPath: /var/hyperledger/tls/server/cert
          name: tls-rootcert
        - mountPath: /var/hyperledger/tls/client/pair
          name: tls-client
        - mountPath: /var/hyperledger/tls/client/cert
          name: tls-clientrootcert
        - mountPath: /var/hyperledger/admin_msp/signcerts
          name: admin-cert
        - mountPath: /var/hyperledger/admin_msp/keystore
          name: admin-key
        - mountPath: /var/hyperledger/admin_msp/cacerts
          name: cacert
        - mountPath: /var/hyperledger/admin_msp/tlscacerts
          name: cacert
        - mountPath: /var/hyperledger/admin_msp/admincerts
          name: admin-cert
      volumes:
      - name: fabric-config
        configMap:
          name: orderer1-hlf-k8s-fabric
      - name: id-cert
        secret:
          secretName: hlf-msp-cert-user
      - name: id-key
        secret:
          secretName: hlf-msp-key-user
      - name: cacert
        secret:
          secretName: hlf-cacert
      - name: tls
        secret:
          secretName: hlf-tls-admin
      - name: tls-rootcert
        secret:
          secretName: hlf-cacert
      - name: tls-client
        secret:
          secretName: hlf-tls-user
      - name: tls-clientrootcert
        secret:
          secretName: hlf-cacert
      - name: admin-cert
        secret:
          secretName: hlf-msp-cert-admin
      - name: admin-key
        secret:
          secretName: hlf-msp-key-admin
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer1-hlf-k8s-system-channel-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-system-channel-operator
        app.kubernetes.io/instance: orderer1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-system-channel-operator
        app.kubernetes.io/instance: orderer1
    spec:
      serviceAccountName: orderer1-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer (orderer1-hlf-ord.orderer:7050)\n"
            until $(nc -z orderer1-hlf-ord.orderer 7050); do
              printf "[DEBUG] Orderer (orderer1-hlf-ord.orderer:7050) is not reacheable, retry in 5s\n"
              sleep 5
            done

            ## Add orgs to the system channel
            while true; do

              printf "[DEBUG] Creating updates for system channel (systemchannel)\n"

              while IFS=" " read -r org mspid configUrl ; do

                ## Delete stale channel configuration files
                rm -rf \
                  channel.block \
                  channel-cfg.block \
                  channel-cfg.json

                ## Fetch system channel configuration block
                until [ -f "channel.block" ] && [ -s "channel.block" ]; do
                  printf "[DEBUG] Fetching the system channel (systemchannel) configuration block\n"

                  peer channel fetch config channel.block \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  sleep 3
                done

                ## Check if update has been already sent
                printf "[DEBUG] Check whether '$org' is in the system channel:\n"
                configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-$org-hasjoined.json
                if grep "$mspid" channel-$org-hasjoined.json > /dev/null; then
                  printf "[DEBUG] $org is already in the system channel\n"
                  sleep 5
                  continue
                else
                  printf "[DEBUG] $org is not in the system channel\n"
                  ## Remove all configuration files because of edge cases (network issue, proposal issue).
                  ## We prefer to delete all and retry all steps to avoid side effects.
                  rm -f *-$org.*
                fi

                ## Extract system channel configuration
                until [ -f "channel-cfg.block" ] && [ -s "channel-cfg.block" ]; do
                  printf "[DEBUG] Extract the system channel configuration part\n"
                  configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-cfg.json
                  configtxlator proto_encode --input channel-cfg.json --type common.Config --output channel-cfg.block
                  sleep 2
                done

                ## Fetch organization configuration
                until [ -f "configOrg-$org.json" ] && [ -s "configOrg-$org.json" ]; do
                  printf "[DEBUG] Fetch the organization ($org) configuration from $configUrl\n"
                  curl --fail -L --output ./configOrg-$org.json $configUrl
                  sleep 3
                done

                ## Create proposal
                until [ -f "proposal-$org.pb" ]; do
                  printf "[DEBUG] Create system channel update proposal for $org\n"

                  ## Add organization to consortium
                  jq -s '.[0] * {"channel_group":{"groups":{"Consortiums":{"groups":{"SampleConsortium":{"groups":{"'$org'":.[1]}}}}}}}' channel-cfg.json configOrg-$org.json > channelconfigUpdated-$org.json
                  configtxlator proto_encode --input channelconfigUpdated-$org.json --type common.Config --output channelupdate-$org.block

                  ## Compute update between channel old configuration and the updated one
                  configtxlator compute_update --channel_id systemchannel --original channel-cfg.block --updated channelupdate-$org.block | configtxlator proto_decode --type common.ConfigUpdate | jq . > compute_update-$org.json

                  ## Create update proposal
                  echo '{"payload":{"header":{"channel_header":{"channel_id": "systemchannel", "type":2}},"data":{"config_update":'$(cat compute_update-$org.json)'}}}' | jq . > proposal-$org.json
                  configtxlator proto_encode --input proposal-$org.json --type common.Envelope --output proposal-$org.pb

                  sleep 2
                done

                ## Submit proposal
                until $(grep "$org" channelconfignew-$org.json > /dev/null 2> /dev/null); do

                  printf "[DEBUG] Send system channel update proposal for $org\n"

                  peer channel update -f proposal-$org.pb \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050

                  sleep 2

                  printf "[DEBUG] Fetch system channel configuration to check the update for $org\n"

                  peer channel fetch config channelnew-$org.block \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  configtxlator proto_decode --input channelnew-$org.block --type common.Block | jq .data.data[0].payload.data.config > channelconfignew-$org.json

                  sleep 5
                done

              done < /config/system-organizations

              sleep 10
            done
        resources:
              null
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: system-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
      volumes:
        - name: system-organizations
          configMap:
            name: orderer1-hlf-k8s-system-organizations
        - name: fabric-config
          configMap:
            name: orderer1-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
---
# Source: hlf-k8s/templates/configmap-application-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-application-proposal-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-chaincode-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-config-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-enrollement-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-monitor.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-toolbox.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/job-hook-delete-secrets.yaml
# # Copyright 2018 Owkin, inc.
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #      http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

#
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: orderer1-hlf-k8s-hook-delete-secrets
#   labels:
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/instance: orderer1
#     helm.sh/chart: hlf-k8s-5.0.2
#     app.kubernetes.io/name: hlf-k8s-hook-delete-secrets
#     app.kubernetes.io/part-of: hlf-k8s
#   annotations:
#     "helm.sh/hook": post-delete
#     "helm.sh/hook-delete-policy": hook-succeeded
#   namespace: "orderer"
# spec:
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: 
#       containers:
#       - name: fabric-tools
#         image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
#         imagePullPolicy: "IfNotPresent"
#         command: ['kubectl']
#         args:
#           - delete
#           - secrets
#           - -n
#           - orderer
#           - hlf-msp-cert-user
#           - hlf-msp-key-user
#           - hlf-cacert
#           - hlf-tls-admin
#           - hlf-tls-user
#           - hlf-cacert
#           - hlf-cacert
#           - hlf-msp-cert-admin
#           - hlf-msp-key-admin
#           - ord-tls-rootcert
#           - hlf-genesis
#           - --ignore-not-found=true
#           - --wait=true
#           - -v=4
#
#
#
#

#
---
# Source: hlf-k8s/templates/rbac.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
---
# Source: hlf-k8s/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orderer2-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer2
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
---
# Source: hlf-k8s/charts/hlf-ord/templates/configmap--ord.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer2-hlf-ord--ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer2"
    chart: hlf-ord-3.0.1
data:
  ## Location where fabric-ca-client configuration is saved
  FABRIC_CA_CLIENT_HOME: /var/hyperledger/fabric-ca-client
  ## Orderer defaults
  ORDERER_CFG_PATH: /var/hyperledger/config
  ORDERER_GENERAL_LEDGERTYPE: file
  ORDERER_FILELEDGER_LOCATION: /var/hyperledger/ledger
  ORDERER_GENERAL_BATCHTIMEOUT: 1s
  ORDERER_GENERAL_BATCHSIZE_MAXMESSAGECOUNT: "10"
  ORDERER_GENERAL_MAXWINDOWSIZE: "1000"
  ORDERER_GENERAL_ORDERERTYPE: "etcdraft"
  ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
  ORDERER_GENERAL_LISTENPORT: "7050"
  ORDERER_GENERAL_LOGLEVEL: debug
  ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/msp
  ORDERER_GENERAL_LOCALMSPID: "MyOrdererMSP"
  ORDERER_GENERAL_GENESISMETHOD: file
  ORDERER_GENERAL_GENESISFILE: /hl_config/genesis/genesis.block
  ORDERER_GENERAL_GENESISPROFILE: initial
  ORDERER_GENERAL_TLS_ENABLED: "true"
  ORDERER_GENERAL_TLS_CERTIFICATE: "/var/hyperledger/tls/server/pair/tls.crt"
  ORDERER_GENERAL_TLS_PRIVATEKEY: "/var/hyperledger/tls/server/pair/tls.key"
  ORDERER_GENERAL_TLS_ROOTCAS: "/var/hyperledger/tls/server/cert/cacert.pem"
  ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED: "true"
  # This is fixed prior to starting the orderer
  ORDERER_GENERAL_TLS_CLIENTROOTCAS: "/var/hyperledger/tls/client/cert/*"
  ORDERER_GENERAL_TLS_CLIENTCERT_FILE: "/var/hyperledger/tls/client/pair/tls.crt"
  ORDERER_GENERAL_TLS_CLIENTKEY_FILE: "/var/hyperledger/tls/client/pair/tls.key"
  GODEBUG: "netdns=go"
  ADMIN_MSP_PATH: /var/hyperledger/admin_msp
  ##############
  # Operations #
  ##############
  ###########
  # Metrics #
  ###########
  ORDERER_METRICS_PROVIDER: "disabled"
---
# Source: hlf-k8s/templates/configmap-enrollment.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer2-hlf-k8s-enrollment
data:
  enrollments: |
---
# Source: hlf-k8s/templates/configmap-fabric.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer2-hlf-k8s-fabric
data:
  discoverConfig.yaml: |
    version: 0
    tlsconfig:
      certpath: /var/hyperledger/tls/client/pair/tls.crt
      keypath: /var/hyperledger/tls/client/pair/tls.key
      peercacertpath: /var/hyperledger/tls/server/cert/cacert.pem
      timeout: 0s
    signerconfig:
      mspid: MyOrdererMSP
      identitypath: /var/hyperledger/msp/signcerts/cert.pem
      keypath: /var/hyperledger/msp/keystore/key.pem
  configtx.yaml: |
    Organizations:
    - &id001
      Name: MyOrderer
      ID: MyOrdererMSP
      MSPDir: /var/hyperledger/admin_msp

      Policies: &id002
        Readers:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
        Writers:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
        Admins:
            Type: Signature
            Rule: "OR('MyOrdererMSP.admin')"
        Endorsement:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
      OrdererEndpoints:
      - "orderer2-hlf-ord.orderer:7050"

    Capabilities:
      Channel: &ChannelCapabilities
          V2_0: true

      Orderer: &OrdererCapabilities
          V2_0: true

      Application: &ApplicationCapabilities
          V2_0: true

    Application: &ApplicationDefaults

      Organizations: null

      Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"

      Capabilities:
          <<: *ApplicationCapabilities

    Profiles:
      GenerateGenesis:
        Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "MAJORITY Admins"
        Capabilities:
          V2_0: true
        Consortiums:
          SampleConsortium:
            Organizations: *id001
        Orderer:
          Addresses:
          - orderer2-hlf-ord.orderer:7050
          EtcdRaft:
            Consenters:
            - Host: orderer2-hlf-ord.orderer
              Port: 7050
              ClientTLSCert: /var/hyperledger/tls/client/pair/tls.crt
              ServerTLSCert: /var/hyperledger/tls/server/pair/tls.crt
          BatchSize:
            AbsoluteMaxBytes: 99 MB
            MaxMessageCount: 10
            PreferredMaxBytes: 512 KB
          BatchTimeout: 500ms
          OrdererType: etcdraft
          Organizations:
          - *id001
          Capabilities:
            V2_0: true
          Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "MAJORITY Admins"
            BlockValidation:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            

  core.yaml: |
    chaincode:
      builder: hyperledger/fabric-ccenv:2.2.1
      golang:
          runtime: hyperledger/fabric-baseos:2.2.1
      externalBuilders:
        - name: external-builder
          path: /builders
    peer:
      BCCSP:
        Default: SW
        PKCS11:
          FileKeyStore:
            KeyStore: null
          Hash: null
          Label: null
          Library: null
          Pin: null
          Security: null
        SW:
          FileKeyStore:
            KeyStore: null
          Hash: SHA2
          Security: 256
      address: orderer2-hlf-ord.orderer:7050
      addressAutoDetect: false
      adminService: null
      authentication:
        timewindow: 15m
      client:
        connTimeout: 3s
      deliveryclient:
        connTimeout: 3s
        reConnectBackoffThreshold: 3600s
        reconnectTotalTimeThreshold: 3600s
      discovery:
        authCacheEnabled: true
        authCacheMaxSize: 1000
        authCachePurgeRetentionRatio: 0.75
        enabled: true
        orgMembersAllowedAccess: false
      fileSystemPath: /var/hyperledger/production
      gomaxprocs: -1
      gossip:
        aliveExpirationTimeout: 25s
        aliveTimeInterval: 5s
        bootstrap: 127.0.0.1:7051
        connTimeout: 2s
        dialTimeout: 3s
        digestWaitTime: 1s
        election:
          leaderAliveThreshold: 10s
          leaderElectionDuration: 5s
          membershipSampleInterval: 1s
          startupGracePeriod: 15s
        endpoint: null
        externalEndpoint: orderer2-hlf-ord.orderer:7050
        maxBlockCountToStore: 100
        maxPropagationBurstLatency: 10ms
        maxPropagationBurstSize: 10
        membershipTrackerInterval: 5s
        orgLeader: 'false'
        propagateIterations: 1
        propagatePeerNum: 3
        publishCertPeriod: 10s
        publishStateInfoInterval: 4s
        pullInterval: 4s
        pullPeerNum: 3
        pvtData:
          btlPullMargin: 10
          pullRetryThreshold: 60s
          pushAckTimeout: 3s
          reconcileBatchSize: 10
          reconcileSleepInterval: 1m
          reconciliationEnabled: true
          transientstoreMaxBlockRetention: 1000
        reconnectInterval: 25s
        recvBuffSize: 20
        requestStateInfoInterval: 4s
        requestWaitTime: 1500ms
        responseWaitTime: 2s
        sendBuffSize: 200
        skipBlockVerification: false
        skipHandshake: 'true'
        stateInfoRetentionInterval: null
        useLeaderElection: 'true'
      handlers:
        authFilters:
        - name: DefaultAuth
        - name: ExpirationCheck
        decorators:
        - name: DefaultDecorator
        endorsers:
          escc:
            library: null
            name: DefaultEndorsement
        validators:
          vscc:
            library: null
            name: DefaultValidation
      id: MyOrderer
      keepalive:
        client:
          interval: 60s
          timeout: 20s
        deliveryClient:
          interval: 60s
          timeout: 20s
        minInterval: 60s
      listenAddress: 0.0.0.0:7051
      localMspId: MyOrdererMSP
      localMspType: bccsp
      mspConfigPath: /var/hyperledger/admin_msp
      networkId: dev
      profile:
        enabled: false
        listenAddress: 0.0.0.0:6060
      tls:
        enabled: 'true'
        cert:
          file: /var/hyperledger/tls/server/pair/tls.crt
        key:
          file: /var/hyperledger/tls/server/pair/tls.key
        clientAuthRequired: 'true'
        clientCert:
          file: /var/hyperledger/tls/client/pair/tls.crt
        clientKey:
          file: /var/hyperledger/tls/client/pair/tls.key
        clientRootCAs:
        - /var/hyperledger/admin_msp/cacerts/cacert.pem
        rootcert:
          file: /var/hyperledger/admin_msp/cacerts/cacert.pem
      validatorPoolSize: null
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer2-hlf-k8s-system-organizations
data:
  system-organizations: |
      MyOrg1 MyOrg1MSP org-1-peer-1-hlf-k8s-config-operator.org-1/config/configOrg.json
      MyOrg2 MyOrg2MSP org-2-peer-1-hlf-k8s-config-operator.org-2/config/configOrg.json
---
# Source: hlf-k8s/templates/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orderer2-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer2
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs:
    - get
    - watch
    - list
    - create
    - delete
---
# Source: hlf-k8s/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orderer2-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer2
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
subjects:
- kind: ServiceAccount
  name: orderer2-hlf-k8s
  namespace: orderer
roleRef:
  kind: Role
  name: orderer2-hlf-k8s
  apiGroup: rbac.authorization.k8s.io
---
# Source: hlf-k8s/charts/hlf-ord/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orderer2-hlf-ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer2"
    chart: hlf-ord-3.0.1
spec:
  type: ClusterIP
  ports:
    - port: 7050
      targetPort: 7050
      protocol: TCP
      name: grpc
  selector:
    app: hlf-ord
    release: orderer2
---
# Source: hlf-k8s/charts/hlf-ord/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer2-hlf-ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer2"
    chart: hlf-ord-3.0.1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-ord
      release: orderer2
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-ord
        heritage: "Helm"
        release: "orderer2"
        chart: hlf-ord-3.0.1
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: genesis
          secret:
            secretName: hlf-genesis
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
      containers:
        - name: orderer
          image: "hyperledger/fabric-orderer:2.2.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: ord-port
              containerPort: 7050
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 5
            periodSeconds: 5
          # TODO: Improve readiness probe (ideally `ps aux | awk '$11=="orderer"'`)
          readinessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 15
          command:
            - sh
            - -c
            - |

              while [ ! -d /var/hyperledger/admin_msp/admincerts ] || [ -z "$(ls -A /var/hyperledger/admin_msp/admincerts)" ];
              do
                echo "\033[0;31m /var/hyperledger/admin_msp/admincerts must contain Ord admin certificates files \033[0m"
                sleep 60
              done

              while [ ! -d /hl_config/genesis ] || [ -z "$(ls -A /hl_config/genesis)" ];
              do
                echo "\033[0;31m /hl_config/genesis must contain Genesis transaction \033[0m"
                sleep 60
              done

              while [ ! -d ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts ];
              do
                echo "\033[0;31m ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts directory must exist \033[0m"
                sleep 60
              done

              echo "\033[0;32m Create ${ORDERER_FILELEDGER_LOCATION} directory to avoid restarts \033[0m"
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}/index

              if [ $ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED ]
              then
                export ORDERER_GENERAL_TLS_CLIENTROOTCAS=$(echo $(ls $ORDERER_GENERAL_TLS_CLIENTROOTCAS) | echo "[$(sed 's/ /,/g')]")
              fi

              echo ">\033[0;35m orderer \033[0m"
              orderer
          envFrom:
            - configMapRef:
                name: orderer2-hlf-ord--ord
          volumeMounts:
            - mountPath: /var/hyperledger
              name: data
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /hl_config/genesis
              name: genesis
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
          resources:
            {}
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer2-hlf-k8s-system-channel-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer2
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-system-channel-operator
        app.kubernetes.io/instance: orderer2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-system-channel-operator
        app.kubernetes.io/instance: orderer2
    spec:
      serviceAccountName: orderer2-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer (orderer2-hlf-ord.orderer:7050)\n"
            until $(nc -z orderer2-hlf-ord.orderer 7050); do
              printf "[DEBUG] Orderer (orderer2-hlf-ord.orderer:7050) is not reacheable, retry in 5s\n"
              sleep 5
            done

            ## Add orgs to the system channel
            while true; do

              printf "[DEBUG] Creating updates for system channel (systemchannel)\n"

              while IFS=" " read -r org mspid configUrl ; do

                ## Delete stale channel configuration files
                rm -rf \
                  channel.block \
                  channel-cfg.block \
                  channel-cfg.json

                ## Fetch system channel configuration block
                until [ -f "channel.block" ] && [ -s "channel.block" ]; do
                  printf "[DEBUG] Fetching the system channel (systemchannel) configuration block\n"

                  peer channel fetch config channel.block \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer2-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  sleep 3
                done

                ## Check if update has been already sent
                printf "[DEBUG] Check whether '$org' is in the system channel:\n"
                configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-$org-hasjoined.json
                if grep "$mspid" channel-$org-hasjoined.json > /dev/null; then
                  printf "[DEBUG] $org is already in the system channel\n"
                  sleep 5
                  continue
                else
                  printf "[DEBUG] $org is not in the system channel\n"
                  ## Remove all configuration files because of edge cases (network issue, proposal issue).
                  ## We prefer to delete all and retry all steps to avoid side effects.
                  rm -f *-$org.*
                fi

                ## Extract system channel configuration
                until [ -f "channel-cfg.block" ] && [ -s "channel-cfg.block" ]; do
                  printf "[DEBUG] Extract the system channel configuration part\n"
                  configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-cfg.json
                  configtxlator proto_encode --input channel-cfg.json --type common.Config --output channel-cfg.block
                  sleep 2
                done

                ## Fetch organization configuration
                until [ -f "configOrg-$org.json" ] && [ -s "configOrg-$org.json" ]; do
                  printf "[DEBUG] Fetch the organization ($org) configuration from $configUrl\n"
                  curl --fail -L --output ./configOrg-$org.json $configUrl
                  sleep 3
                done

                ## Create proposal
                until [ -f "proposal-$org.pb" ]; do
                  printf "[DEBUG] Create system channel update proposal for $org\n"

                  ## Add organization to consortium
                  jq -s '.[0] * {"channel_group":{"groups":{"Consortiums":{"groups":{"SampleConsortium":{"groups":{"'$org'":.[1]}}}}}}}' channel-cfg.json configOrg-$org.json > channelconfigUpdated-$org.json
                  configtxlator proto_encode --input channelconfigUpdated-$org.json --type common.Config --output channelupdate-$org.block

                  ## Compute update between channel old configuration and the updated one
                  configtxlator compute_update --channel_id systemchannel --original channel-cfg.block --updated channelupdate-$org.block | configtxlator proto_decode --type common.ConfigUpdate | jq . > compute_update-$org.json

                  ## Create update proposal
                  echo '{"payload":{"header":{"channel_header":{"channel_id": "systemchannel", "type":2}},"data":{"config_update":'$(cat compute_update-$org.json)'}}}' | jq . > proposal-$org.json
                  configtxlator proto_encode --input proposal-$org.json --type common.Envelope --output proposal-$org.pb

                  sleep 2
                done

                ## Submit proposal
                until $(grep "$org" channelconfignew-$org.json > /dev/null 2> /dev/null); do

                  printf "[DEBUG] Send system channel update proposal for $org\n"

                  peer channel update -f proposal-$org.pb \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer2-hlf-ord.orderer:7050

                  sleep 2

                  printf "[DEBUG] Fetch system channel configuration to check the update for $org\n"

                  peer channel fetch config channelnew-$org.block \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer2-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  configtxlator proto_decode --input channelnew-$org.block --type common.Block | jq .data.data[0].payload.data.config > channelconfignew-$org.json

                  sleep 5
                done

              done < /config/system-organizations

              sleep 10
            done
        resources:
              null
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: system-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
      volumes:
        - name: system-organizations
          configMap:
            name: orderer2-hlf-k8s-system-organizations
        - name: fabric-config
          configMap:
            name: orderer2-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
---
# Source: hlf-k8s/templates/configmap-application-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-application-proposal-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-chaincode-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-config-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-enrollement-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-genesis-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-monitor.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-toolbox.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/job-hook-delete-secrets.yaml
# # Copyright 2018 Owkin, inc.
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #      http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

#
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: orderer2-hlf-k8s-hook-delete-secrets
#   labels:
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/instance: orderer2
#     helm.sh/chart: hlf-k8s-5.0.2
#     app.kubernetes.io/name: hlf-k8s-hook-delete-secrets
#     app.kubernetes.io/part-of: hlf-k8s
#   annotations:
#     "helm.sh/hook": post-delete
#     "helm.sh/hook-delete-policy": hook-succeeded
#   namespace: "orderer"
# spec:
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: 
#       containers:
#       - name: fabric-tools
#         image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
#         imagePullPolicy: "IfNotPresent"
#         command: ['kubectl']
#         args:
#           - delete
#           - secrets
#           - -n
#           - orderer
#           - hlf-msp-cert-user
#           - hlf-msp-key-user
#           - hlf-cacert
#           - hlf-tls-admin
#           - hlf-tls-user
#           - hlf-cacert
#           - hlf-cacert
#           - hlf-msp-cert-admin
#           - hlf-msp-key-admin
#           - ord-tls-rootcert
#           - hlf-genesis
#           - --ignore-not-found=true
#           - --wait=true
#           - -v=4
#
#
#
#

#
---
# Source: hlf-k8s/templates/rbac.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
---
# Source: hlf-k8s/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orderer3-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer3
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
---
# Source: hlf-k8s/charts/hlf-ord/templates/configmap--ord.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer3-hlf-ord--ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ord-3.0.1
data:
  ## Location where fabric-ca-client configuration is saved
  FABRIC_CA_CLIENT_HOME: /var/hyperledger/fabric-ca-client
  ## Orderer defaults
  ORDERER_CFG_PATH: /var/hyperledger/config
  ORDERER_GENERAL_LEDGERTYPE: file
  ORDERER_FILELEDGER_LOCATION: /var/hyperledger/ledger
  ORDERER_GENERAL_BATCHTIMEOUT: 1s
  ORDERER_GENERAL_BATCHSIZE_MAXMESSAGECOUNT: "10"
  ORDERER_GENERAL_MAXWINDOWSIZE: "1000"
  ORDERER_GENERAL_ORDERERTYPE: "etcdraft"
  ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
  ORDERER_GENERAL_LISTENPORT: "7050"
  ORDERER_GENERAL_LOGLEVEL: debug
  ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/msp
  ORDERER_GENERAL_LOCALMSPID: "MyOrdererMSP"
  ORDERER_GENERAL_GENESISMETHOD: file
  ORDERER_GENERAL_GENESISFILE: /hl_config/genesis/genesis.block
  ORDERER_GENERAL_GENESISPROFILE: initial
  ORDERER_GENERAL_TLS_ENABLED: "true"
  ORDERER_GENERAL_TLS_CERTIFICATE: "/var/hyperledger/tls/server/pair/tls.crt"
  ORDERER_GENERAL_TLS_PRIVATEKEY: "/var/hyperledger/tls/server/pair/tls.key"
  ORDERER_GENERAL_TLS_ROOTCAS: "/var/hyperledger/tls/server/cert/cacert.pem"
  ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED: "true"
  # This is fixed prior to starting the orderer
  ORDERER_GENERAL_TLS_CLIENTROOTCAS: "/var/hyperledger/tls/client/cert/*"
  ORDERER_GENERAL_TLS_CLIENTCERT_FILE: "/var/hyperledger/tls/client/pair/tls.crt"
  ORDERER_GENERAL_TLS_CLIENTKEY_FILE: "/var/hyperledger/tls/client/pair/tls.key"
  GODEBUG: "netdns=go"
  ADMIN_MSP_PATH: /var/hyperledger/admin_msp
  ##############
  # Operations #
  ##############
  ###########
  # Metrics #
  ###########
  ORDERER_METRICS_PROVIDER: "disabled"
---
# Source: hlf-k8s/templates/configmap-enrollment.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer3-hlf-k8s-enrollment
data:
  enrollments: |
---
# Source: hlf-k8s/templates/configmap-fabric.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer3-hlf-k8s-fabric
data:
  discoverConfig.yaml: |
    version: 0
    tlsconfig:
      certpath: /var/hyperledger/tls/client/pair/tls.crt
      keypath: /var/hyperledger/tls/client/pair/tls.key
      peercacertpath: /var/hyperledger/tls/server/cert/cacert.pem
      timeout: 0s
    signerconfig:
      mspid: MyOrdererMSP
      identitypath: /var/hyperledger/msp/signcerts/cert.pem
      keypath: /var/hyperledger/msp/keystore/key.pem
  configtx.yaml: |
    Organizations:
    - &id001
      Name: MyOrderer
      ID: MyOrdererMSP
      MSPDir: /var/hyperledger/admin_msp

      Policies: &id002
        Readers:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
        Writers:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
        Admins:
            Type: Signature
            Rule: "OR('MyOrdererMSP.admin')"
        Endorsement:
            Type: Signature
            Rule: "OR('MyOrdererMSP.member')"
      OrdererEndpoints:
      - "orderer3-hlf-ord.orderer:7050"

    Capabilities:
      Channel: &ChannelCapabilities
          V2_0: true

      Orderer: &OrdererCapabilities
          V2_0: true

      Application: &ApplicationCapabilities
          V2_0: true

    Application: &ApplicationDefaults

      Organizations: null

      Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"

      Capabilities:
          <<: *ApplicationCapabilities

    Profiles:
      GenerateGenesis:
        Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "MAJORITY Admins"
        Capabilities:
          V2_0: true
        Consortiums:
          SampleConsortium:
            Organizations: *id001
        Orderer:
          Addresses:
          - orderer3-hlf-ord.orderer:7050
          EtcdRaft:
            Consenters:
            - Host: orderer3-hlf-ord.orderer
              Port: 7050
              ClientTLSCert: /var/hyperledger/tls/client/pair/tls.crt
              ServerTLSCert: /var/hyperledger/tls/server/pair/tls.crt
          BatchSize:
            AbsoluteMaxBytes: 99 MB
            MaxMessageCount: 10
            PreferredMaxBytes: 512 KB
          BatchTimeout: 500ms
          OrdererType: etcdraft
          Organizations:
          - *id001
          Capabilities:
            V2_0: true
          Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "MAJORITY Admins"
            BlockValidation:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            

  core.yaml: |
    chaincode:
      builder: hyperledger/fabric-ccenv:2.2.1
      golang:
          runtime: hyperledger/fabric-baseos:2.2.1
      externalBuilders:
        - name: external-builder
          path: /builders
    peer:
      BCCSP:
        Default: SW
        PKCS11:
          FileKeyStore:
            KeyStore: null
          Hash: null
          Label: null
          Library: null
          Pin: null
          Security: null
        SW:
          FileKeyStore:
            KeyStore: null
          Hash: SHA2
          Security: 256
      address: orderer3-hlf-ord.orderer:7050
      addressAutoDetect: false
      adminService: null
      authentication:
        timewindow: 15m
      client:
        connTimeout: 3s
      deliveryclient:
        connTimeout: 3s
        reConnectBackoffThreshold: 3600s
        reconnectTotalTimeThreshold: 3600s
      discovery:
        authCacheEnabled: true
        authCacheMaxSize: 1000
        authCachePurgeRetentionRatio: 0.75
        enabled: true
        orgMembersAllowedAccess: false
      fileSystemPath: /var/hyperledger/production
      gomaxprocs: -1
      gossip:
        aliveExpirationTimeout: 25s
        aliveTimeInterval: 5s
        bootstrap: 127.0.0.1:7051
        connTimeout: 2s
        dialTimeout: 3s
        digestWaitTime: 1s
        election:
          leaderAliveThreshold: 10s
          leaderElectionDuration: 5s
          membershipSampleInterval: 1s
          startupGracePeriod: 15s
        endpoint: null
        externalEndpoint: orderer3-hlf-ord.orderer:7050
        maxBlockCountToStore: 100
        maxPropagationBurstLatency: 10ms
        maxPropagationBurstSize: 10
        membershipTrackerInterval: 5s
        orgLeader: 'false'
        propagateIterations: 1
        propagatePeerNum: 3
        publishCertPeriod: 10s
        publishStateInfoInterval: 4s
        pullInterval: 4s
        pullPeerNum: 3
        pvtData:
          btlPullMargin: 10
          pullRetryThreshold: 60s
          pushAckTimeout: 3s
          reconcileBatchSize: 10
          reconcileSleepInterval: 1m
          reconciliationEnabled: true
          transientstoreMaxBlockRetention: 1000
        reconnectInterval: 25s
        recvBuffSize: 20
        requestStateInfoInterval: 4s
        requestWaitTime: 1500ms
        responseWaitTime: 2s
        sendBuffSize: 200
        skipBlockVerification: false
        skipHandshake: 'true'
        stateInfoRetentionInterval: null
        useLeaderElection: 'true'
      handlers:
        authFilters:
        - name: DefaultAuth
        - name: ExpirationCheck
        decorators:
        - name: DefaultDecorator
        endorsers:
          escc:
            library: null
            name: DefaultEndorsement
        validators:
          vscc:
            library: null
            name: DefaultValidation
      id: MyOrderer
      keepalive:
        client:
          interval: 60s
          timeout: 20s
        deliveryClient:
          interval: 60s
          timeout: 20s
        minInterval: 60s
      listenAddress: 0.0.0.0:7051
      localMspId: MyOrdererMSP
      localMspType: bccsp
      mspConfigPath: /var/hyperledger/admin_msp
      networkId: dev
      profile:
        enabled: false
        listenAddress: 0.0.0.0:6060
      tls:
        enabled: 'true'
        cert:
          file: /var/hyperledger/tls/server/pair/tls.crt
        key:
          file: /var/hyperledger/tls/server/pair/tls.key
        clientAuthRequired: 'true'
        clientCert:
          file: /var/hyperledger/tls/client/pair/tls.crt
        clientKey:
          file: /var/hyperledger/tls/client/pair/tls.key
        clientRootCAs:
        - /var/hyperledger/admin_msp/cacerts/cacert.pem
        rootcert:
          file: /var/hyperledger/admin_msp/cacerts/cacert.pem
      validatorPoolSize: null
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer3-hlf-k8s-system-organizations
data:
  system-organizations: |
      MyOrg1 MyOrg1MSP org-1-peer-1-hlf-k8s-config-operator.org-1/config/configOrg.json
      MyOrg2 MyOrg2MSP org-2-peer-1-hlf-k8s-config-operator.org-2/config/configOrg.json
---
# Source: hlf-k8s/templates/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orderer3-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer3
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs:
    - get
    - watch
    - list
    - create
    - delete
---
# Source: hlf-k8s/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orderer3-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer3
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
subjects:
- kind: ServiceAccount
  name: orderer3-hlf-k8s
  namespace: orderer
roleRef:
  kind: Role
  name: orderer3-hlf-k8s
  apiGroup: rbac.authorization.k8s.io
---
# Source: hlf-k8s/charts/hlf-ord/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orderer3-hlf-ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ord-3.0.1
spec:
  type: ClusterIP
  ports:
    - port: 7050
      targetPort: 7050
      protocol: TCP
      name: grpc
  selector:
    app: hlf-ord
    release: orderer3
---
# Source: hlf-k8s/charts/hlf-ord/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer3-hlf-ord
  labels:
    app: hlf-ord
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ord-3.0.1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-ord
      release: orderer3
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-ord
        heritage: "Helm"
        release: "orderer3"
        chart: hlf-ord-3.0.1
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: genesis
          secret:
            secretName: hlf-genesis
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
      containers:
        - name: orderer
          image: "hyperledger/fabric-orderer:2.2.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: ord-port
              containerPort: 7050
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 5
            periodSeconds: 5
          # TODO: Improve readiness probe (ideally `ps aux | awk '$11=="orderer"'`)
          readinessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 15
          command:
            - sh
            - -c
            - |

              while [ ! -d /var/hyperledger/admin_msp/admincerts ] || [ -z "$(ls -A /var/hyperledger/admin_msp/admincerts)" ];
              do
                echo "\033[0;31m /var/hyperledger/admin_msp/admincerts must contain Ord admin certificates files \033[0m"
                sleep 60
              done

              while [ ! -d /hl_config/genesis ] || [ -z "$(ls -A /hl_config/genesis)" ];
              do
                echo "\033[0;31m /hl_config/genesis must contain Genesis transaction \033[0m"
                sleep 60
              done

              while [ ! -d ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts ];
              do
                echo "\033[0;31m ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts directory must exist \033[0m"
                sleep 60
              done

              echo "\033[0;32m Create ${ORDERER_FILELEDGER_LOCATION} directory to avoid restarts \033[0m"
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}/index

              if [ $ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED ]
              then
                export ORDERER_GENERAL_TLS_CLIENTROOTCAS=$(echo $(ls $ORDERER_GENERAL_TLS_CLIENTROOTCAS) | echo "[$(sed 's/ /,/g')]")
              fi

              echo ">\033[0;35m orderer \033[0m"
              orderer
          envFrom:
            - configMapRef:
                name: orderer3-hlf-ord--ord
          volumeMounts:
            - mountPath: /var/hyperledger
              name: data
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /hl_config/genesis
              name: genesis
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
          resources:
            {}
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer3-hlf-k8s-system-channel-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: orderer3
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-system-channel-operator
        app.kubernetes.io/instance: orderer3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-system-channel-operator
        app.kubernetes.io/instance: orderer3
    spec:
      serviceAccountName: orderer3-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer (orderer3-hlf-ord.orderer:7050)\n"
            until $(nc -z orderer3-hlf-ord.orderer 7050); do
              printf "[DEBUG] Orderer (orderer3-hlf-ord.orderer:7050) is not reacheable, retry in 5s\n"
              sleep 5
            done

            ## Add orgs to the system channel
            while true; do

              printf "[DEBUG] Creating updates for system channel (systemchannel)\n"

              while IFS=" " read -r org mspid configUrl ; do

                ## Delete stale channel configuration files
                rm -rf \
                  channel.block \
                  channel-cfg.block \
                  channel-cfg.json

                ## Fetch system channel configuration block
                until [ -f "channel.block" ] && [ -s "channel.block" ]; do
                  printf "[DEBUG] Fetching the system channel (systemchannel) configuration block\n"

                  peer channel fetch config channel.block \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer3-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  sleep 3
                done

                ## Check if update has been already sent
                printf "[DEBUG] Check whether '$org' is in the system channel:\n"
                configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-$org-hasjoined.json
                if grep "$mspid" channel-$org-hasjoined.json > /dev/null; then
                  printf "[DEBUG] $org is already in the system channel\n"
                  sleep 5
                  continue
                else
                  printf "[DEBUG] $org is not in the system channel\n"
                  ## Remove all configuration files because of edge cases (network issue, proposal issue).
                  ## We prefer to delete all and retry all steps to avoid side effects.
                  rm -f *-$org.*
                fi

                ## Extract system channel configuration
                until [ -f "channel-cfg.block" ] && [ -s "channel-cfg.block" ]; do
                  printf "[DEBUG] Extract the system channel configuration part\n"
                  configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-cfg.json
                  configtxlator proto_encode --input channel-cfg.json --type common.Config --output channel-cfg.block
                  sleep 2
                done

                ## Fetch organization configuration
                until [ -f "configOrg-$org.json" ] && [ -s "configOrg-$org.json" ]; do
                  printf "[DEBUG] Fetch the organization ($org) configuration from $configUrl\n"
                  curl --fail -L --output ./configOrg-$org.json $configUrl
                  sleep 3
                done

                ## Create proposal
                until [ -f "proposal-$org.pb" ]; do
                  printf "[DEBUG] Create system channel update proposal for $org\n"

                  ## Add organization to consortium
                  jq -s '.[0] * {"channel_group":{"groups":{"Consortiums":{"groups":{"SampleConsortium":{"groups":{"'$org'":.[1]}}}}}}}' channel-cfg.json configOrg-$org.json > channelconfigUpdated-$org.json
                  configtxlator proto_encode --input channelconfigUpdated-$org.json --type common.Config --output channelupdate-$org.block

                  ## Compute update between channel old configuration and the updated one
                  configtxlator compute_update --channel_id systemchannel --original channel-cfg.block --updated channelupdate-$org.block | configtxlator proto_decode --type common.ConfigUpdate | jq . > compute_update-$org.json

                  ## Create update proposal
                  echo '{"payload":{"header":{"channel_header":{"channel_id": "systemchannel", "type":2}},"data":{"config_update":'$(cat compute_update-$org.json)'}}}' | jq . > proposal-$org.json
                  configtxlator proto_encode --input proposal-$org.json --type common.Envelope --output proposal-$org.pb

                  sleep 2
                done

                ## Submit proposal
                until $(grep "$org" channelconfignew-$org.json > /dev/null 2> /dev/null); do

                  printf "[DEBUG] Send system channel update proposal for $org\n"

                  peer channel update -f proposal-$org.pb \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer3-hlf-ord.orderer:7050

                  sleep 2

                  printf "[DEBUG] Fetch system channel configuration to check the update for $org\n"

                  peer channel fetch config channelnew-$org.block \
                    -c systemchannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/msp/cacerts/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer3-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt

                  configtxlator proto_decode --input channelnew-$org.block --type common.Block | jq .data.data[0].payload.data.config > channelconfignew-$org.json

                  sleep 5
                done

              done < /config/system-organizations

              sleep 10
            done
        resources:
              null
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: system-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
      volumes:
        - name: system-organizations
          configMap:
            name: orderer3-hlf-k8s-system-organizations
        - name: fabric-config
          configMap:
            name: orderer3-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
---
# Source: hlf-k8s/templates/configmap-application-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-application-proposal-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-chaincode-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-config-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-enrollement-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-genesis-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-monitor.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-toolbox.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/job-hook-delete-secrets.yaml
# # Copyright 2018 Owkin, inc.
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #      http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

#
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: orderer3-hlf-k8s-hook-delete-secrets
#   labels:
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/instance: orderer3
#     helm.sh/chart: hlf-k8s-5.0.2
#     app.kubernetes.io/name: hlf-k8s-hook-delete-secrets
#     app.kubernetes.io/part-of: hlf-k8s
#   annotations:
#     "helm.sh/hook": post-delete
#     "helm.sh/hook-delete-policy": hook-succeeded
#   namespace: "orderer"
# spec:
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: 
#       containers:
#       - name: fabric-tools
#         image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
#         imagePullPolicy: "IfNotPresent"
#         command: ['kubectl']
#         args:
#           - delete
#           - secrets
#           - -n
#           - orderer
#           - hlf-msp-cert-user
#           - hlf-msp-key-user
#           - hlf-cacert
#           - hlf-tls-admin
#           - hlf-tls-user
#           - hlf-cacert
#           - hlf-cacert
#           - hlf-msp-cert-admin
#           - hlf-msp-key-admin
#           - ord-tls-rootcert
#           - hlf-genesis
#           - --ignore-not-found=true
#           - --wait=true
#           - -v=4
#
#
#
#

#
---
# Source: hlf-k8s/templates/rbac.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
---
# Source: hlf-k8s/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: org-1-peer-1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: org-1-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-1-peer-1"
    chart: hlf-couchdb-2.0.1
type: Opaque
data:
  COUCHDB_USER:  "Y291Y2hkYg=="
  
  COUCHDB_PASSWORD:  "Y291Y2hkYnB3ZA=="
---
# Source: hlf-k8s/charts/hlf-peer/templates/configmap--peer.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-1-peer-1-hlf-peer--peer
  labels:
    app: hlf-peer
    heritage: "Helm"
    release: "org-1-peer-1"
    chart: hlf-peer-5.0.0
data:
  CORE_PEER_ADDRESSAUTODETECT: "true"
  CORE_PEER_ID: org-1-peer-1
  CORE_PEER_NETWORKID: nid1
  # If we have an ingress, we set hostname to it
  # Otherwise we use CORE_PEER_ADDRESSAUTODETECT to auto-detect its address
  CORE_PEER_LISTENADDRESS: 0.0.0.0:7051
  CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
  CORE_PEER_COMMITTER_ENABLED: "true"
  CORE_PEER_PROFILE_ENABLED: "true"
  CORE_PEER_DISCOVERY_PERIOD: 60s
  CORE_PEER_DISCOVERY_TOUCHPERIOD: 60s
  CORE_PEER_LOCALMSPID: "MyOrg1MSP"
  CORE_PEER_MSPCONFIGPATH: /var/hyperledger/msp
  ###########
  # Logging #
  ###########
  CORE_LOGGING_LEVEL: "info"
  CORE_LOGGING_PEER: "info"
  CORE_LOGGING_CAUTHDSL: "warning"
  CORE_LOGGING_GOSSIP: "info"
  CORE_LOGGING_LEDGER: "info"
  CORE_LOGGING_MSP: "warning"
  CORE_LOGGING_POLICIES: "warning"
  CORE_LOGGING_GRPC: "error"
  ##########
  # Gossip #
  ##########
  CORE_PEER_GOSSIP_BOOTSTRAP: "127.0.0.1:7051"
  CORE_PEER_GOSSIP_ENDPOINT: ""
  CORE_PEER_GOSSIP_EXTERNALENDPOINT: "org-1-peer-1-hlf-peer.org-1:7051"
  CORE_PEER_GOSSIP_ORGLEADER: "false"
  CORE_PEER_GOSSIP_USELEADERELECTION: "true"
  #############
  # CHAINCODE #
  #############
  CORE_CHAINCODE_BUILDER: "hyperledger/fabric-ccenv:2.2.1"
  CORE_CHAINCODE_GOLANG_RUNTIME: "hyperledger/fabric-baseos:2.2.1"
  ##########
  # TLS    #
  ##########
  CORE_PEER_TLS_ENABLED: "true"
  CORE_PEER_TLS_CERT_FILE: "/var/hyperledger/tls/server/pair/tls.crt"
  CORE_PEER_TLS_KEY_FILE: "/var/hyperledger/tls/server/pair/tls.key"
  CORE_PEER_TLS_ROOTCERT_FILE: "/var/hyperledger/tls/server/cert/cacert.pem"
  CORE_PEER_TLS_CLIENTAUTHREQUIRED: "true"
  # This is fixed prior to starting the peer
  CORE_PEER_TLS_CLIENTROOTCAS_FILES: "/var/hyperledger/tls/client/cert/*"
  CORE_PEER_TLS_CLIENTCERT_FILE: "/var/hyperledger/tls/client/pair/tls.crt"
  CORE_PEER_TLS_CLIENTKEY_FILE: "/var/hyperledger/tls/client/pair/tls.key"
  CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
  CORE_LEDGER_STATE_STATEDATABASE: "CouchDB"
  # Containers in the same pod share the host
  CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS: org-1-peer-1-hlf-couchdb:5984
  PEER_CFG_PATH: /var/hyperledger/config
  FABRIC_CFG_PATH: /var/hyperledger/fabric_cfg
  GODEBUG: "netdns=go"
  ADMIN_MSP_PATH: /var/hyperledger/admin_msp
  ORD_TLS_PATH: /var/hyperledger/tls/ord/cert
##############
# Operations #
##############
###########
# Metrics #
###########
  CORE_METRICS_PROVIDER: "disabled"
---
# Source: hlf-k8s/templates/configmap-application-organization.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-1-peer-1-hlf-k8s-application-organizations-mychannel
data:
  application-organizations: |
      MyOrg1 MyOrg1MSP org-1-peer-1-hlf-k8s-config-operator.org-1/config/configOrgWithAnchors.json
      MyOrg2 MyOrg2MSP org-2-peer-1-hlf-k8s-config-operator.org-2/config/configOrgWithAnchors.json
---
# Source: hlf-k8s/templates/configmap-application-proposal-organization.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-1-peer-1-hlf-k8s-application-proposal-organizations-mychannel
data:
  application-proposal-organizations: |
---
# Source: hlf-k8s/templates/configmap-enrollment.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: org-1-peer-1-hlf-k8s-enrollment
data:
  enrollments: |
---
# Source: hlf-k8s/templates/configmap-fabric.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: org-1-peer-1-hlf-k8s-fabric
data:
  discoverConfig.yaml: |
    version: 0
    tlsconfig:
      certpath: /var/hyperledger/tls/client/pair/tls.crt
      keypath: /var/hyperledger/tls/client/pair/tls.key
      peercacertpath: /var/hyperledger/tls/server/cert/cacert.pem
      timeout: 0s
    signerconfig:
      mspid: MyOrg1MSP
      identitypath: /var/hyperledger/msp/signcerts/cert.pem
      keypath: /var/hyperledger/msp/keystore/key.pem
  configtx.yaml: |
    Organizations:
    - &id001
      Name: MyOrg1
      ID: MyOrg1MSP
      MSPDir: /var/hyperledger/admin_msp

      Policies: &id002
        Readers:
            Type: Signature
            Rule: "OR('MyOrg1MSP.member')"
        Writers:
            Type: Signature
            Rule: "OR('MyOrg1MSP.member')"
        Admins:
            Type: Signature
            Rule: "OR('MyOrg1MSP.admin')"
        Endorsement:
            Type: Signature
            Rule: "OR('MyOrg1MSP.member')"
      AnchorPeers:
      - Host: org-1-peer-1-hlf-peer.org-1
        Port: 7051

    Capabilities:
      Channel: &ChannelCapabilities
          V2_0: true

      Orderer: &OrdererCapabilities
          V2_0: true

      Application: &ApplicationCapabilities
          V2_0: true

    Application: &ApplicationDefaults

      Organizations: null

      Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"

      Capabilities:
          <<: *ApplicationCapabilities

    Profiles:
      OrgsChannel-mychannel:
        Capabilities:
          V2_0: true
        Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "ANY Admins"
        Application:
          <<: *ApplicationDefaults
          Policies:
            LifecycleEndorsement:
                Type: ImplicitMeta
                Rule: "ANY Endorsement"
            Endorsement:
                Type: ImplicitMeta
                Rule: "ANY Endorsement"
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "ANY Admins"
          Organizations:
          - *id001
        Consortium: SampleConsortium

  core.yaml: |
    chaincode:
      builder: hyperledger/fabric-ccenv:2.2.1
      golang:
          runtime: hyperledger/fabric-baseos:2.2.1
      externalBuilders:
        - name: external-builder
          path: /builders
    peer:
      BCCSP:
        Default: SW
        PKCS11:
          FileKeyStore:
            KeyStore: null
          Hash: null
          Label: null
          Library: null
          Pin: null
          Security: null
        SW:
          FileKeyStore:
            KeyStore: null
          Hash: SHA2
          Security: 256
      address: org-1-peer-1-hlf-peer.org-1:7051
      addressAutoDetect: false
      adminService: null
      authentication:
        timewindow: 15m
      client:
        connTimeout: 3s
      deliveryclient:
        connTimeout: 3s
        reConnectBackoffThreshold: 3600s
        reconnectTotalTimeThreshold: 3600s
      discovery:
        authCacheEnabled: true
        authCacheMaxSize: 1000
        authCachePurgeRetentionRatio: 0.75
        enabled: true
        orgMembersAllowedAccess: false
      fileSystemPath: /var/hyperledger/production
      gomaxprocs: -1
      gossip:
        aliveExpirationTimeout: 25s
        aliveTimeInterval: 5s
        bootstrap: 127.0.0.1:7051
        connTimeout: 2s
        dialTimeout: 3s
        digestWaitTime: 1s
        election:
          leaderAliveThreshold: 10s
          leaderElectionDuration: 5s
          membershipSampleInterval: 1s
          startupGracePeriod: 15s
        endpoint: null
        externalEndpoint: org-1-peer-1-hlf-peer.org-1:7051
        maxBlockCountToStore: 100
        maxPropagationBurstLatency: 10ms
        maxPropagationBurstSize: 10
        membershipTrackerInterval: 5s
        orgLeader: 'false'
        propagateIterations: 1
        propagatePeerNum: 3
        publishCertPeriod: 10s
        publishStateInfoInterval: 4s
        pullInterval: 4s
        pullPeerNum: 3
        pvtData:
          btlPullMargin: 10
          pullRetryThreshold: 60s
          pushAckTimeout: 3s
          reconcileBatchSize: 10
          reconcileSleepInterval: 1m
          reconciliationEnabled: true
          transientstoreMaxBlockRetention: 1000
        reconnectInterval: 25s
        recvBuffSize: 20
        requestStateInfoInterval: 4s
        requestWaitTime: 1500ms
        responseWaitTime: 2s
        sendBuffSize: 200
        skipBlockVerification: false
        skipHandshake: 'true'
        stateInfoRetentionInterval: null
        useLeaderElection: 'true'
      handlers:
        authFilters:
        - name: DefaultAuth
        - name: ExpirationCheck
        decorators:
        - name: DefaultDecorator
        endorsers:
          escc:
            library: null
            name: DefaultEndorsement
        validators:
          vscc:
            library: null
            name: DefaultValidation
      id: MyOrg1
      keepalive:
        client:
          interval: 60s
          timeout: 20s
        deliveryClient:
          interval: 60s
          timeout: 20s
        minInterval: 60s
      listenAddress: 0.0.0.0:7051
      localMspId: MyOrg1MSP
      localMspType: bccsp
      mspConfigPath: /var/hyperledger/admin_msp
      networkId: dev
      profile:
        enabled: false
        listenAddress: 0.0.0.0:6060
      tls:
        enabled: 'true'
        cert:
          file: /var/hyperledger/tls/server/pair/tls.crt
        key:
          file: /var/hyperledger/tls/server/pair/tls.key
        clientAuthRequired: 'true'
        clientCert:
          file: /var/hyperledger/tls/client/pair/tls.crt
        clientKey:
          file: /var/hyperledger/tls/client/pair/tls.key
        clientRootCAs:
        - /var/hyperledger/admin_msp/cacerts/cacert.pem
        rootcert:
          file: /var/hyperledger/admin_msp/cacerts/cacert.pem
      validatorPoolSize: null
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: org-1-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-1-peer-1"
    chart: hlf-couchdb-2.0.1
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: hlf-k8s/templates/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: org-1-peer-1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs:
    - get
    - watch
    - list
    - create
    - delete
---
# Source: hlf-k8s/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: org-1-peer-1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
subjects:
- kind: ServiceAccount
  name: org-1-peer-1-hlf-k8s
  namespace: org-1
roleRef:
  kind: Role
  name: org-1-peer-1-hlf-k8s
  apiGroup: rbac.authorization.k8s.io
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-1-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-1-peer-1"
    chart: hlf-couchdb-2.0.1
spec:
  type: ClusterIP
  ports:
    - port: 5984
      targetPort: couchdb
      protocol: TCP
      name: couchdb
  selector:
    app: hlf-couchdb
    release: org-1-peer-1
---
# Source: hlf-k8s/charts/hlf-peer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-1-peer-1-hlf-peer
  labels:
    app: hlf-peer
    heritage: "Helm"
    release: "org-1-peer-1"
    chart: hlf-peer-5.0.0
spec:
  type: ClusterIP
  ports:
    - port: 7051
      targetPort: 7051
      protocol: TCP
      name: request
    - port: 7053
      targetPort: 7053
      protocol: TCP
      name: event
  selector:
    app: hlf-peer
    release: org-1-peer-1
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-1-peer-1-hlf-k8s-appchannel-operator-mychannel
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/name: hlf-k8s-appchannel-operator-mychannel
    app.kubernetes.io/instance: org-1-peer-1
---
# Source: hlf-k8s/templates/deployment-chaincode.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-1-peer-1-hlf-k8s-chaincode-basic
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s-chaincode-basic
spec:
  type: ClusterIP
  ports:
  - name: chaincode
    port: 7052
    protocol: TCP
    targetPort: 7052
  selector:
    app.kubernetes.io/name: hlf-k8s-chaincode-basic
    app.kubernetes.io/instance: org-1-peer-1
---
# Source: hlf-k8s/templates/deployment-config-operator.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-1-peer-1-hlf-k8s-config-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/name: hlf-k8s-config-operator
    app.kubernetes.io/instance: org-1-peer-1
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-1-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-1-peer-1"
    chart: hlf-couchdb-2.0.1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-couchdb
      release: org-1-peer-1
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-couchdb
        heritage: "Helm"
        release: "org-1-peer-1"
        chart: hlf-couchdb-2.0.1
    spec:
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: org-1-peer-1-hlf-couchdb
      containers:
        - name: hlf-couchdb
          image: "us-central1-docker.pkg.dev/blockedge-381408/hlf-img/couchdb:1"
          imagePullPolicy: IfNotPresent
          envFrom:
          - secretRef:
              name: org-1-peer-1-hlf-couchdb
          volumeMounts:
          - mountPath: /opt/couchdb/data
            name: data
          ports:
            - name: couchdb
              containerPort: 5984
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5984
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: 5984
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            {}
---
# Source: hlf-k8s/charts/hlf-peer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-1-peer-1-hlf-peer
  labels:
    app: hlf-peer
    heritage: "Helm"
    release: "org-1-peer-1"
    chart: hlf-peer-5.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-peer
      release: org-1-peer-1
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-peer
        heritage: "Helm"
        release: "org-1-peer-1"
        chart: hlf-peer-5.0.0
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: dockersocket
          hostPath:
            path: /var/run/docker.sock
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
      containers:
        - name: peer
          image: "us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-peer:1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: request
              containerPort: 7051
              protocol: TCP
            - name: event
              containerPort: 7053
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 5
            periodSeconds: 5
          # TODO: Improve readiness probe (ideally `ps aux | awk '$11=="orderer"'`)
          readinessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 15
          command:
            - sh
            - -c
            - |
              # To avoid having separate secrets for CouchDB and HLF
              export CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=$COUCHDB_USER
              export CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=$COUCHDB_PASSWORD

              while [ ! -d /var/hyperledger/admin_msp/admincerts ] || [ -z "$(ls -A /var/hyperledger/admin_msp/admincerts)" ];
              do
                echo "\033[0;31m /var/hyperledger/admin_msp/admincerts must contain Peer admin certificates files \033[0m"
                sleep 60
              done

              while [ ! -d ${CORE_PEER_MSPCONFIGPATH}/signcerts ];
              do
                echo "\033[0;31m ${CORE_PEER_MSPCONFIGPATH}/signcerts directory must exist \033[0m"
                sleep 60
              done

              if [ ! -d ${FABRIC_CFG_PATH} ]
              then
                mkdir -p ${FABRIC_CFG_PATH}
                cp -r /etc/hyperledger/fabric/core.yaml ${FABRIC_CFG_PATH}
                ls ${FABRIC_CFG_PATH}
              fi

              if [ $CORE_PEER_TLS_CLIENTAUTHREQUIRED ]
              then
                export CORE_PEER_TLS_CLIENTROOTCAS_FILES=$(ls -d $CORE_PEER_TLS_CLIENTROOTCAS_FILES)
              fi

              echo ">\033[0;35m peer node start \033[0m"
              peer node start
          envFrom:
            - secretRef:
                name: org-1-peer-1-hlf-couchdb
            - configMapRef:
                name: org-1-peer-1-hlf-peer--peer
          volumeMounts:
            - mountPath: /var/hyperledger
              name: data
            - mountPath: /host/var/run/docker.sock
              name: dockersocket
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
          resources:
            {}
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-1-peer-1-hlf-k8s-appchannel-operator-mychannel
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-appchannel-operator-mychannel
        app.kubernetes.io/instance: org-1-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-appchannel-operator-mychannel
        app.kubernetes.io/instance: org-1-peer-1
    spec:
      serviceAccountName: org-1-peer-1-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer (orderer1-hlf-ord.orderer:7050)\n"
            until $(nc -z orderer1-hlf-ord.orderer 7050); do
              printf "[DEBUG] Orderer (orderer1-hlf-ord.orderer:7050) is not reacheable, retry in 5s\n"
              sleep 5
            done

            ## Add orgs to the application channel
            while true; do

              ## Create and join application channel
              until grep -e "existing.*mychannel" -e "FORBIDDEN" channel.created > /dev/null; do

                printf "[DEBUG] Create and join the application channel (mychannel)\n"

                ## Create channel
                configtxgen -profile OrgsChannel-mychannel --outputCreateChannelTx channel.tx -channelID mychannel -asOrg MyOrg1
                peer channel create -f channel.tx \
                  --outputBlock channel.block \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 2> channel.created

                ## Create and add anchor
                configtxgen -profile OrgsChannel-mychannel --outputAnchorPeersUpdate anchor.tx -channelID mychannel -asOrg MyOrg1

                peer channel update \
                  -f anchor.tx \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                sleep 1
              done

              ## Join Application Channel
              ## Fetch channel list

              peer channel list \
                --tls \
                --clientauth \
                --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                --keyfile /var/hyperledger/tls/client/pair/tls.key \
                --certfile /var/hyperledger/tls/client/pair/tls.crt \
                -o orderer1-hlf-ord.orderer:7050 > channel.list

              until grep "mychannel" channel.list > /dev/null; do

                printf "[DEBUG] Fetching application channel block\n"
                peer channel fetch oldest channeljoin.block \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                printf "[DEBUG] Joining channel\n"
                peer channel join -b channeljoin.block

                ## Fetch channel list
                peer channel list \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 > channel.list

                sleep 1
              done


              ## Add organizations to application channel

              while IFS=" " read -r org mspid configUrl ; do

                ## Delete stale channel configuration files
                rm -rf \
                  channel.block \
                  channel-cfg.block \
                  channel-cfg.json


                ## Fetch up-to-date channel configuration block
                until [ -f "channel.block" ] && [ -s "channel.block" ]; do
                  printf "[DEBUG] Fetching the channel (mychannel) configuration block\n"
                  peer channel fetch config channel.block \
                    -c mychannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt
                  sleep 3
                done

                ## Check if update has been already sent
                printf "[DEBUG] Check if $org is in the application channel \n"
                configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-$org-hasjoined.json
                if grep "$mspid" channel-$org-hasjoined.json > /dev/null; then
                  printf "[DEBUG] $org is already in the application channel\n"
                  rm -f /data/proposal-$org.pb
                  sleep 5
                  continue
                else
                  printf "[DEBUG] $org is not in the application channel\n"
                  ## Remove all configuration files because of edge cases (network issue, proposal issue).
                  ## We prefer to delete all and retry all steps to avoid side effect.
                  rm -f *-$org.*
                fi

                ## Fetch organization configuration
                if ! [ -s "configOrg-$org.json" ]; then
                  printf "[DEBUG] Fetch the organization ($org) configuration from $configUrl\n"
                  curl --fail -L --output ./configOrg-$org.json $configUrl || continue # continue to next org if curl fails

                  if [ -s "configOrg-$org.json" ]; then
                    printf "[DEBUG] Extract tls root certificate from the organization ($org) configuration file \n"
                    jq -r .values.MSP.value.config.tls_root_certs[0] ./configOrg-$org.json | base64 -d > tlsRootCert-$org.crt

                    printf "[DEBUG] Add the organization ($org) for endorsement \n"
                    PEER_HOST=$(jq -r .values.AnchorPeers.value.anchor_peers[0].host configOrg-$org.json)
                    PEER_PORT=$(jq -r .values.AnchorPeers.value.anchor_peers[0].port configOrg-$org.json)
                    grep -qxF -e "--peerAddresses ${PEER_HOST}:${PEER_PORT} --tlsRootCertFiles tlsRootCert-$org.crt" endorsement.config || echo "--peerAddresses ${PEER_HOST}:${PEER_PORT} --tlsRootCertFiles tlsRootCert-$org.crt" >> endorsement.config
                  fi
                fi

                ## Extract application channel configuration
                until [ -f "channel-cfg.block" ] && [ -s "channel-cfg.block" ]; do
                  configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-cfg.json
                  configtxlator proto_encode --input channel-cfg.json --type common.Config --output channel-cfg.block
                  sleep 2
                done


                ## Fetch update proposal from external orgs if exists
                while IFS=" " read -r orgProposal mspidProposal proposalServerUrl ; do

                  # Don't need to network-fetch proposals made by ourselves
                  if [ "$orgProposal" = "MyOrg1" ]; then continue; fi

                  printf "[DEBUG] Fetch the update proposal built by organization ($orgProposal) for organization ($org) from $proposalServerUrl/proposal-$org.pb \n"
                  curl --fail -L --output ./external-$orgProposal-proposal-$org.pb $proposalServerUrl/proposal-$org.pb

                  ## Compare external proposal file with local one, keep the largest (more signatures) between them as the only difference will be the number of signatures
                  if [ -s "external-$orgProposal-proposal-$org.pb" ]
                  then
                    if [ -s "proposal-$org.pb" ] ; then
                      if [ $(stat -c %s "external-$orgProposal-proposal-$org.pb") -gt $(stat -c %s "proposal-$org.pb") ] ; then
                        printf "[DEBUG] Use the $org update proposal from $orgProposal as there are more signatures in it !\n"
                        cp external-$orgProposal-proposal-$org.pb proposal-$org.pb
                      fi
                    else
                      printf "[DEBUG] Use the $org update proposal from $orgProposal \n"
                      cp external-$orgProposal-proposal-$org.pb proposal-$org.pb
                    fi
                  fi

                done < /proposal/application-proposal-organizations

                ## Create proposal if not fetched
                until [ -f "proposal-$org.pb" ]; do
                  printf "[DEBUG] Create application channel update for $org \n"

                  ## Add the Organization in the Applciation group
                  jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups":{"'$org'":.[1]}}}}}' channel-cfg.json configOrg-$org.json > new-channel-cfg-$org.json
                  configtxlator proto_encode --input new-channel-cfg-$org.json --type common.Config --output channelupdate-$org.block

                  ## Compute update between channel old configuration and the updated one
                  configtxlator compute_update \
                    --channel_id mychannel \
                    --original channel-cfg.block \
                    --updated channelupdate-$org.block \
                    | configtxlator proto_decode --type common.ConfigUpdate | jq . > compute_update-$org.json

                  ## Create the update proposal
                  echo '{"payload":{"header":{"channel_header":{"channel_id": "mychannel", "type":2}},"data":{"config_update":'$(cat compute_update-$org.json)'}}}' | jq . > proposal-$org.json
                  configtxlator proto_encode --input proposal-$org.json --type common.Envelope --output proposal-$org.pb

                  sleep 2
                done

                ## Validate proposal application version
                PROPOSAL_APP_VERSION=$(cat channel-cfg.json | jq '.channel_group.groups.Application.version')
                CHANNEL_APP_VERSION=$(configtxlator proto_decode --input proposal-$org.pb --type common.Envelope | jq '.payload.data.config_update.read_set.groups.Application.version')
                printf "[DEBUG] Proposal application version: $CHANNEL_APP_VERSION. Channel application version: $PROPOSAL_APP_VERSION\n"
                if [ $CHANNEL_APP_VERSION != $PROPOSAL_APP_VERSION ] ; then
                  # Proposal update should have a readset application version matching config application version.
                  # That suggests the proposal update is not up to date with the latest ledger state.
                  printf "[DEBUG] Application version mismatch. Delete proposal for '$org'.\n"
                  rm -f /data/proposal-$org.pb proposal-$org.pb
                  continue
                fi

                ## Sign update proposal
                peer channel signconfigtx \
                  -f proposal-$org.pb \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                ## Update proposal in /data
                cp proposal-$org.pb /data/proposal-$org.pb
                chmod +r /data/proposal-$org.pb

                ## Submit proposal
                NUM_SIGNATURES=$(configtxlator proto_decode --input proposal-$org.pb --type common.Envelope | jq '.payload.data.signatures | map(.signature_header.creator.mspid) | unique | length')
                NUM_APPLICATION_ORGS=$(wc -l /proposal/application-proposal-organizations | cut -c 1)
                printf "[DEBUG] Submit channel update for '$org' with $NUM_SIGNATURES signatures (out of $NUM_APPLICATION_ORGS organizations)\n"
                peer channel update \
                  -f proposal-$org.pb \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                sleep 5

              done < /config/application-organizations


              ## CHAINCODES

              
              
                  - 

              

              ## Wait readiness: basic

              while true; do

                # Chaincode commit
                printf "[DEBUG] Wait chaincode ready basic 1.0 on channel mychannel\n"

                peer lifecycle chaincode checkcommitreadiness \
                  --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                  --channelID mychannel \
                  --name basic \
                  --version 1.0 \
                  --sequence 1 \
                  --init-required \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 > chaincode.basic.ready 2>&1

                if ! grep "false" chaincode.basic.ready > /dev/null; then
                  break
                fi

                sleep 5

              done

              ## Commit chaincode basic

              peer lifecycle chaincode querycommitted --channelID mychannel > chaincode.basic.list 2>&1

              if ! grep "basic" chaincode.basic.list | grep "1.0" > /dev/null; then

                # Chaincode commit
                printf "[DEBUG] Commit chaincode basic 1.0 on channel mychannel\n"

                ENDORSEMENT=$(cat endorsement.config| tr '\n' ' ')

                peer lifecycle chaincode commit \
                  --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                  --channelID mychannel \
                  --name basic \
                  --version 1.0 \
                  --sequence 1 --init-required \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 \
                  $ENDORSEMENT > chaincode.basic.commit 2>&1

                cat chaincode.basic.commit

                peer lifecycle chaincode querycommitted --channelID mychannel > chaincode.basic.list 2>&1

                sleep 5

              fi

              ## Init chaincode basic

              if [[ ! -e chaincode.basic.init ]]; then
                  touch chaincode.basic.init
              fi

              if ! grep "already initialized" chaincode.basic.init > /dev/null; then

                printf "[DEBUG] Init chaincode basic 1.0 on channel mychannel\n"

                peer chaincode invoke --isInit \
                  --channelID mychannel \
                  --name basic \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 \
                  -c '{"Args":["Init"]}' > chaincode.basic.init 2>&1

                sleep 5

              fi

              
              

              sleep 10

            done
        resources:
              null
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: application-organizations
            readOnly: true
          - mountPath: /proposal
            name: application-proposal-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/tls/ord/cert
            name: ord-tls-rootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          - mountPath: /data
            name: data
      - name: nginx
        image: nginx:1.17.6
        ports:
        - containerPort: 80
        volumeMounts:
          - mountPath: /usr/share/nginx/html/proposal
            name: data
      volumes:
        - name: application-organizations
          configMap:
            name: org-1-peer-1-hlf-k8s-application-organizations-mychannel
        - name: application-proposal-organizations
          configMap:
            name: org-1-peer-1-hlf-k8s-application-proposal-organizations-mychannel
        - name: fabric-config
          configMap:
            name: org-1-peer-1-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
        - name: data
          emptyDir: {}
---
# Source: hlf-k8s/templates/deployment-chaincode-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-1-peer-1-hlf-k8s-chaincode-operator-basic
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s-chaincode-operator-basic
    app.kubernetes.io/part-of: org-1-peer-1
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-chaincode-operator
        app.kubernetes.io/instance: org-1-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-chaincode-operator
        app.kubernetes.io/instance: org-1-peer-1
    spec:
      serviceAccountName: org-1-peer-1-hlf-k8s
      containers:
        - name: fabric-tools
          image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
          imagePullPolicy: "IfNotPresent"
          command: ['bash', '-c']
          args:
            - |
              ## Update CA certs
              update-ca-certificates

              ## Check connection with the Peer
              printf "[DEBUG] Testing the connection with the Peer (org-1-peer-1-hlf-peer.org-1:7051)\n"
              until $(nc -z org-1-peer-1-hlf-peer.org-1 7051); do
                printf "[DEBUG] Peer (org-1-peer-1-hlf-peer.org-1:7051) is not reacheable, retry in 5s\n"
                sleep 5
              done

              ## Check connection with the Orderer
              printf "[DEBUG] Testing the connection with the Orderer (orderer1-hlf-ord.orderer:7050)\n"
              until $(nc -z orderer1-hlf-ord.orderer 7050); do
                printf "[DEBUG] Orderer (orderer1-hlf-ord.orderer:7050) is not reacheable, retry in 5s\n"
                sleep 5
              done


              ## Install chaincode

              while true; do

                peer lifecycle chaincode queryinstalled -O json > chaincode.list 2>/dev/null

                while ! [ -s chaincode.list ]; do
                  printf "[DEBUG] chaincode.list file is empty, retry in 5s\n"
                  sleep 5
                  peer lifecycle chaincode queryinstalled -O json > chaincode.list 2>/dev/null
                done

                until jq -e '.installed_chaincodes[] | select(.label=="basic")' chaincode.list > /dev/null; do
                  printf "[DEBUG] Chaincode basic not installed\n"
                  printf "[DEBUG] Installing chaincode basic\n"

                  ## Clean potential remaining artifacts
                  rm -f code.tar.gz chaincode.tgz connection.json metadata.json

                  printf "[DEBUG] Generate connection.json for basic\n"

                  echo "{
                  \"address\": \"org-1-peer-1-hlf-k8s-chaincode-basic.org-1:7052\",
                  \"dial_timeout\": \"10s\",
                  \"tls_required\": true,
                  \"client_auth_required\": true,
                  \"client_key\": \"$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /var/hyperledger/tls/client/pair/tls.key)\",
                  \"client_cert\": \"$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /var/hyperledger/tls/client/pair/tls.crt)\",
                  \"root_cert\": \"$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /var/hyperledger/tls/client/cert/cacert.pem)\"
                  }" > connection.json

                  cat connection.json

                  printf "[DEBUG] Archive connection.json to code.tar.gz for basic\n"
                  tar cfz code.tar.gz connection.json

                  printf "[DEBUG] Generate metadata.json for basic\n"
                  echo '{"path":"", "type":"external", "label":"basic"}' > metadata.json

                  printf "[DEBUG] Archive  code.tar.gz and metadata.json to chaincode.tgz for basic\n"
                  tar cfz chaincode.tgz code.tar.gz metadata.json

                  ## Install chaincode
                  printf "[DEBUG] Install chaincode basic\n"
                  peer lifecycle chaincode install chaincode.tgz 2>/dev/null


                  peer lifecycle chaincode queryinstalled -O json > chaincode.list 2>/dev/null

                  if  jq -e '.installed_chaincodes[] | select(.label=="basic")' chaincode.list > /dev/null; then
                    CHAINCODE_CCID=$(jq '.installed_chaincodes[] | select(.label=="basic")' chaincode.list | jq -r .package_id)
                    printf "[DEBUG] Chaincode basic installed with ccid : ${CHAINCODE_CCID}\n"
                  fi

                  sleep 10
                done

                CHAINCODE_CCID=$(jq '.installed_chaincodes[] | select(.label=="basic")' chaincode.list | jq -r .package_id)

                until kubectl get secret chaincode-ccid-basic-1.0 > /dev/null; do
                    printf "[DEBUG] Create chaincode ccid secret for basic 1.0\n"
                    kubectl create secret generic chaincode-ccid-basic-1.0 --from-literal=ccid=$CHAINCODE_CCID
                done


                ## Approve chaincode

                

                until grep -q "${CHAINCODE_CCID}" chaincode_basic_1.0_mychannel.approve; do

                  printf "[DEBUG] Approving chaincode basic 1.0 with ccid ${CHAINCODE_CCID} on channel mychannel\n"

                  peer lifecycle chaincode approveformyorg \
                    --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                    --channelID mychannel \
                    --name basic \
                    --version 1.0 \
                    --package-id $CHAINCODE_CCID \
                    --sequence 2  \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > /dev/null 2>&1

                  peer lifecycle chaincode queryapproved \
                    --channelID mychannel \
                    --name basic \
                    --sequence 2 \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > chaincode_basic_1.0_mychannel.approve 2>&1

                  if ! grep -q "${CHAINCODE_CCID}" chaincode_basic_1.0_mychannel.approve; then
                    printf "[DEBUG] Chaincode basic 1.0 with ccid ${CHAINCODE_CCID} is not approved on channel \n"
                    sleep 5
                  fi

                done


                ## Check chaincode commit readiness
                ## chaincode must be commit ready or, if already committed, return an ask for new definition sequence

                until grep -q -e "true" -e "new definition must be sequence" chaincode_basic_1.0_mychannel.ready; do

                  printf "[DEBUG] Check chaincode readiness basic 1.0 on channel mychannel\n"

                  peer lifecycle chaincode checkcommitreadiness \
                    --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                    --channelID mychannel \
                    --name basic \
                    --version 1.0 \
                    --sequence 2 \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > chaincode_basic_1.0_mychannel.ready 2>&1

                  sleep 5

                done


                ## Commit chaincode

                peer lifecycle chaincode querycommitted --channelID mychannel > chaincode_basic_1.0_mychannel.committed 2>&1

                if ! grep "Name: basic" chaincode_basic_1.0_mychannel.committed | grep "Version: 1.0" | grep -q "Sequence: 2"; then

                  # Chaincode commit
                  printf "[DEBUG] Commit chaincode basic 1.0 on channel mychannel\n"

                  DISCOVERY_PEER=$(discover peers --channel=mychannel --server=org-1-peer-1-hlf-peer.org-1:7051 --tlsKey=/var/hyperledger/tls/client/pair/tls.key --tlsCert=/var/hyperledger/tls/client/pair/tls.crt --peerTLSCA=/var/hyperledger/tls/client/cert/cacert.pem --userKey=/var/hyperledger/msp/keystore/key.pem --userCert=/var/hyperledger/msp/signcerts/cert.pem --MSP MyOrg1MSP)
                  DISCOVERY_CONFIG=$(discover config --channel=mychannel --server=org-1-peer-1-hlf-peer.org-1:7051 --tlsKey=/var/hyperledger/tls/client/pair/tls.key --tlsCert=/var/hyperledger/tls/client/pair/tls.crt --peerTLSCA=/var/hyperledger/tls/client/cert/cacert.pem --userKey=/var/hyperledger/msp/keystore/key.pem --userCert=/var/hyperledger/msp/signcerts/cert.pem --MSP MyOrg1MSP)

                  ENDORSEMENT="";

                  while read -r mspId; do
                      TLS_ROOT_CERT=$(echo "$DISCOVERY_CONFIG" | jq -r ".msps | .\"${mspId}\" | .tls_root_certs[0]");
                      ENDPOINT=$(echo "$DISCOVERY_PEER" | jq -r ".[] | select( .MSPID == \"$mspId\" ) | .Endpoint");
                      echo "${TLS_ROOT_CERT}" | base64 -d > "tlsroot-${mspId}.crt";
                      ENDORSEMENT="${ENDORSEMENT} --peerAddresses=${ENDPOINT} --tlsRootCertFiles=tlsroot-${mspId}.crt";
                  done < <(echo "$DISCOVERY_PEER" | jq -r '.[].MSPID')

                  peer lifecycle chaincode commit \
                      --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                      --channelID mychannel \
                      --name basic \
                      --version 1.0 \
                      --sequence 2 \
                      --tls \
                      --clientauth \
                      --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                      --keyfile /var/hyperledger/tls/client/pair/tls.key \
                      --certfile /var/hyperledger/tls/client/pair/tls.crt \
                      -o orderer1-hlf-ord.orderer:7050 \
                      $ENDORSEMENT > chaincode_basic_1.0_mychannel.commit 2>&1

                  cat chaincode_basic_1.0_mychannel.commit

                  peer lifecycle chaincode querycommitted --channelID mychannel > chaincode_basic_1.0_mychannel.committed 2>&1

                  sleep 5

                fi

                sleep 10
              done
          resources:
              null
          env:
          - name: CORE_PEER_MSPCONFIGPATH
            value: /var/hyperledger/admin_msp
          - name: GODEBUG
            value: "netdns=go+1"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric
              name: fabric-config
              readOnly: true
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /data
              name: data
      volumes:
      - name: fabric-config
        configMap:
          name: org-1-peer-1-hlf-k8s-fabric
      - name: id-cert
        secret:
          secretName: hlf-msp-cert-user
      - name: id-key
        secret:
          secretName: hlf-msp-key-user
      - name: cacert
        secret:
          secretName: hlf-cacert
      - name: tls
        secret:
          secretName: hlf-tls-admin
      - name: tls-rootcert
        secret:
          secretName: hlf-cacert
      - name: tls-client
        secret:
          secretName: hlf-tls-user
      - name: tls-clientrootcert
        secret:
          secretName: hlf-cacert
      - name: admin-cert
        secret:
          secretName: hlf-msp-cert-admin
      - name: admin-key
        secret:
          secretName: hlf-msp-key-admin
      - name: ord-tls-rootcert
        secret:
          secretName: ord-tls-rootcert
      - name: data
        emptyDir: {}
---
# Source: hlf-k8s/templates/deployment-chaincode.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-1-peer-1-hlf-k8s-chaincode-basic
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s-chaincode
    app.kubernetes.io/part-of: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-chaincode-basic
        app.kubernetes.io/instance: org-1-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-chaincode-basic
        app.kubernetes.io/instance: org-1-peer-1
    spec:
      containers:
        - name: substra-chaincode-basic
          image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/basic:2
          imagePullPolicy: "IfNotPresent"
          # command: ['./chaincode']
          command: [  ]
          env:
            - name: CHAINCODE_CCID
              valueFrom:
                secretKeyRef:
                  name: chaincode-ccid-basic-1.0
                  key: ccid
            - name: CHAINCODE_ADDRESS
              value: "0.0.0.0:7052"
            - name: TLS_CERT_FILE
              value: "/var/hyperledger/tls/client/pair/tls.crt"
            - name: TLS_KEY_FILE
              value: "/var/hyperledger/tls/client/pair/tls.key"
            - name: TLS_ROOTCERT_FILE
              value: "/var/hyperledger/tls/client/cert/cacert.pem"
          volumeMounts:
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
          ports:
            - containerPort: 7052
      volumes:
      - name: tls-client
        secret:
          secretName: hlf-tls-user
      - name: tls-clientrootcert
        secret:
          secretName: hlf-cacert
---
# Source: hlf-k8s/templates/deployment-config-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-1-peer-1-hlf-k8s-config-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-config-operator
        app.kubernetes.io/instance: org-1-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-config-operator
        app.kubernetes.io/instance: org-1-peer-1
    spec:
      serviceAccountName: org-1-peer-1-hlf-k8s
      containers:
        - name: fabric-tools
          image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args:
            - |
              ## Create configuration files (public keys) for the organization
              while true; do

                until [ -f "/data/configOrg.json" ]; do
                  printf "[DEBUG] Create the organization config file\n"
                  configtxgen -printOrg MyOrg1 > /data/configOrg.json
                  sleep 1
                done

                until [ -f "/data/configOrgWithAnchors.json" ]; do
                  printf "[DEBUG] Create the org config anchor file\n"
                  jq -s '.[0] * {"values":{"AnchorPeers":{"mod_policy":"Admins", "value":{"anchor_peers":[{"host":"org-1-peer-1-hlf-peer.org-1", "port":"7051"}]}, "version": "0"}}}' /data/configOrg.json > /data/configOrgWithAnchors.json
                  sleep 1
                done

                sleep 10
              done
          resources:
              null
          env:
          - name: CORE_PEER_MSPCONFIGPATH
            value: /var/hyperledger/admin_msp
          - name: GODEBUG
            value: "netdns=go+1"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric
              name: fabric-config
              readOnly: true
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /data
              name: data
        - name: nginx
          image: nginx:1.17.6
          ports:
          - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/config
              name: data
      volumes:
        - name: fabric-config
          configMap:
            name: org-1-peer-1-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
        - name: data
          emptyDir: {}
---
# Source: hlf-k8s/templates/deployment-monitor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-1-peer-1-hlf-k8s-discover-monitor-mychannel
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-1-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-discover-monitor-mychannel
        app.kubernetes.io/instance: org-1-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-discover-monitor-mychannel
        app.kubernetes.io/instance: org-1-peer-1
    spec:
      serviceAccountName: org-1-peer-1-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            while true; do
              printf "[DEBUG] Discover application channel: mychannel\n"
              discover --configFile /etc/hyperledger/fabric/discoverConfig.yaml peers --channel mychannel --server org-1-peer-1-hlf-peer.org-1:7051
              sleep 10
            done
        resources:
              null
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/tls/ord/cert
            name: ord-tls-rootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          - mountPath: /data
            name: data
      volumes:
        - name: fabric-config
          configMap:
            name: org-1-peer-1-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
        - name: data
          emptyDir: {}
---
# Source: hlf-k8s/templates/configmap-application-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-application-proposal-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-chaincode-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-enrollement-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-genesis-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-monitor.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-toolbox.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/job-hook-delete-secrets.yaml
# # Copyright 2018 Owkin, inc.
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #      http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

#
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: org-1-peer-1-hlf-k8s-hook-delete-secrets
#   labels:
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/instance: org-1-peer-1
#     helm.sh/chart: hlf-k8s-5.0.2
#     app.kubernetes.io/name: hlf-k8s-hook-delete-secrets
#     app.kubernetes.io/part-of: hlf-k8s
#   annotations:
#     "helm.sh/hook": post-delete
#     "helm.sh/hook-delete-policy": hook-succeeded
#   namespace: "org-1"
# spec:
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: 
#       containers:
#       - name: fabric-tools
#         image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
#         imagePullPolicy: "IfNotPresent"
#         command: ['kubectl']
#         args:
#           - delete
#           - secrets
#           - -n
#           - org-1
#           - hlf-msp-cert-user
#           - hlf-msp-key-user
#           - hlf-cacert
#           - hlf-tls-admin
#           - hlf-tls-user
#           - hlf-cacert
#           - hlf-cacert
#           - hlf-msp-cert-admin
#           - hlf-msp-key-admin
#           - ord-tls-rootcert
#           - hlf-genesis
#           - --ignore-not-found=true
#           - --wait=true
#           - -v=4
#
#
#
#

#
#
# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: org-1-peer-1-hlf-k8s-hook-chaincode-delete-secrets
#   labels:
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/instance: org-1-peer-1
#     helm.sh/chart: hlf-k8s-5.0.2
#     app.kubernetes.io/name: hlf-k8s-hook-chaincode-delete-secrets
#     app.kubernetes.io/part-of: hlf-k8s
#   annotations:
#     "helm.sh/hook": post-delete
#     "helm.sh/hook-delete-policy": hook-succeeded
#   namespace: "org-1"
# spec:
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: 
#       containers:
#       - name: fabric-tools
#         image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
#         imagePullPolicy: "IfNotPresent"
#         command: ['kubectl']
#         args:
#           - delete
#           - secrets
#           - -n
#           - org-1
#
#           - chaincode-ccid-basic
#
#           - --ignore-not-found=true
#           - --wait=true
#           - -v=4
#
#
#
#
#
---
# Source: hlf-k8s/templates/rbac.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
---
# Source: hlf-k8s/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: org-2-peer-1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: org-2-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-2-peer-1"
    chart: hlf-couchdb-2.0.1
type: Opaque
data:
  COUCHDB_USER:  "Y291Y2hkYg=="
  
  COUCHDB_PASSWORD:  "Y291Y2hkYnB3ZA=="
---
# Source: hlf-k8s/charts/hlf-peer/templates/configmap--peer.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-2-peer-1-hlf-peer--peer
  labels:
    app: hlf-peer
    heritage: "Helm"
    release: "org-2-peer-1"
    chart: hlf-peer-5.0.0
data:
  CORE_PEER_ADDRESSAUTODETECT: "true"
  CORE_PEER_ID: org-2-peer-1
  CORE_PEER_NETWORKID: nid1
  # If we have an ingress, we set hostname to it
  # Otherwise we use CORE_PEER_ADDRESSAUTODETECT to auto-detect its address
  CORE_PEER_LISTENADDRESS: 0.0.0.0:7051
  CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
  CORE_PEER_COMMITTER_ENABLED: "true"
  CORE_PEER_PROFILE_ENABLED: "true"
  CORE_PEER_DISCOVERY_PERIOD: 60s
  CORE_PEER_DISCOVERY_TOUCHPERIOD: 60s
  CORE_PEER_LOCALMSPID: "MyOrg2MSP"
  CORE_PEER_MSPCONFIGPATH: /var/hyperledger/msp
  ###########
  # Logging #
  ###########
  CORE_LOGGING_LEVEL: "info"
  CORE_LOGGING_PEER: "info"
  CORE_LOGGING_CAUTHDSL: "warning"
  CORE_LOGGING_GOSSIP: "info"
  CORE_LOGGING_LEDGER: "info"
  CORE_LOGGING_MSP: "warning"
  CORE_LOGGING_POLICIES: "warning"
  CORE_LOGGING_GRPC: "error"
  ##########
  # Gossip #
  ##########
  CORE_PEER_GOSSIP_BOOTSTRAP: "127.0.0.1:7051"
  CORE_PEER_GOSSIP_ENDPOINT: ""
  CORE_PEER_GOSSIP_EXTERNALENDPOINT: "org-2-peer-1-hlf-peer.org-2:7051"
  CORE_PEER_GOSSIP_ORGLEADER: "false"
  CORE_PEER_GOSSIP_USELEADERELECTION: "true"
  #############
  # CHAINCODE #
  #############
  CORE_CHAINCODE_BUILDER: "hyperledger/fabric-ccenv:2.2.1"
  CORE_CHAINCODE_GOLANG_RUNTIME: "hyperledger/fabric-baseos:2.2.1"
  ##########
  # TLS    #
  ##########
  CORE_PEER_TLS_ENABLED: "true"
  CORE_PEER_TLS_CERT_FILE: "/var/hyperledger/tls/server/pair/tls.crt"
  CORE_PEER_TLS_KEY_FILE: "/var/hyperledger/tls/server/pair/tls.key"
  CORE_PEER_TLS_ROOTCERT_FILE: "/var/hyperledger/tls/server/cert/cacert.pem"
  CORE_PEER_TLS_CLIENTAUTHREQUIRED: "true"
  # This is fixed prior to starting the peer
  CORE_PEER_TLS_CLIENTROOTCAS_FILES: "/var/hyperledger/tls/client/cert/*"
  CORE_PEER_TLS_CLIENTCERT_FILE: "/var/hyperledger/tls/client/pair/tls.crt"
  CORE_PEER_TLS_CLIENTKEY_FILE: "/var/hyperledger/tls/client/pair/tls.key"
  CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
  CORE_LEDGER_STATE_STATEDATABASE: "CouchDB"
  # Containers in the same pod share the host
  CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS: org-2-peer-1-hlf-couchdb:5984
  PEER_CFG_PATH: /var/hyperledger/config
  FABRIC_CFG_PATH: /var/hyperledger/fabric_cfg
  GODEBUG: "netdns=go"
  ADMIN_MSP_PATH: /var/hyperledger/admin_msp
  ORD_TLS_PATH: /var/hyperledger/tls/ord/cert
##############
# Operations #
##############
###########
# Metrics #
###########
  CORE_METRICS_PROVIDER: "disabled"
---
# Source: hlf-k8s/templates/configmap-application-organization.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-2-peer-1-hlf-k8s-application-organizations-mychannel
data:
  application-organizations: |
      MyOrg1 MyOrg1MSP org-1-peer-1-hlf-k8s-config-operator.org-1/config/configOrgWithAnchors.json
      MyOrg2 MyOrg2MSP org-2-peer-1-hlf-k8s-config-operator.org-2/config/configOrgWithAnchors.json
---
# Source: hlf-k8s/templates/configmap-application-proposal-organization.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-2-peer-1-hlf-k8s-application-proposal-organizations-mychannel
data:
  application-proposal-organizations: |
---
# Source: hlf-k8s/templates/configmap-enrollment.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: org-2-peer-1-hlf-k8s-enrollment
data:
  enrollments: |
---
# Source: hlf-k8s/templates/configmap-fabric.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: org-2-peer-1-hlf-k8s-fabric
data:
  discoverConfig.yaml: |
    version: 0
    tlsconfig:
      certpath: /var/hyperledger/tls/client/pair/tls.crt
      keypath: /var/hyperledger/tls/client/pair/tls.key
      peercacertpath: /var/hyperledger/tls/server/cert/cacert.pem
      timeout: 0s
    signerconfig:
      mspid: MyOrg2MSP
      identitypath: /var/hyperledger/msp/signcerts/cert.pem
      keypath: /var/hyperledger/msp/keystore/key.pem
  configtx.yaml: |
    Organizations:
    - &id001
      Name: MyOrg2
      ID: MyOrg2MSP
      MSPDir: /var/hyperledger/admin_msp

      Policies: &id002
        Readers:
            Type: Signature
            Rule: "OR('MyOrg2MSP.member')"
        Writers:
            Type: Signature
            Rule: "OR('MyOrg2MSP.member')"
        Admins:
            Type: Signature
            Rule: "OR('MyOrg2MSP.admin')"
        Endorsement:
            Type: Signature
            Rule: "OR('MyOrg2MSP.member')"
      AnchorPeers:
      - Host: org-2-peer-1-hlf-peer.org-2
        Port: 7051

    Capabilities:
      Channel: &ChannelCapabilities
          V2_0: true

      Orderer: &OrdererCapabilities
          V2_0: true

      Application: &ApplicationCapabilities
          V2_0: true

    Application: &ApplicationDefaults

      Organizations: null

      Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"

      Capabilities:
          <<: *ApplicationCapabilities

    Profiles:
      OrgsChannel-mychannel:
        Capabilities:
          V2_0: true
        Policies:
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "ANY Admins"
        Application:
          <<: *ApplicationDefaults
          Policies:
            LifecycleEndorsement:
                Type: ImplicitMeta
                Rule: "ANY Endorsement"
            Endorsement:
                Type: ImplicitMeta
                Rule: "ANY Endorsement"
            Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
            Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
            Admins:
                Type: ImplicitMeta
                Rule: "ANY Admins"
          Organizations:
          - *id001
        Consortium: SampleConsortium

  core.yaml: |
    chaincode:
      builder: hyperledger/fabric-ccenv:2.2.1
      golang:
          runtime: hyperledger/fabric-baseos:2.2.1
      externalBuilders:
        - name: external-builder
          path: /builders
    peer:
      BCCSP:
        Default: SW
        PKCS11:
          FileKeyStore:
            KeyStore: null
          Hash: null
          Label: null
          Library: null
          Pin: null
          Security: null
        SW:
          FileKeyStore:
            KeyStore: null
          Hash: SHA2
          Security: 256
      address: org-2-peer-1-hlf-peer.org-2:7051
      addressAutoDetect: false
      adminService: null
      authentication:
        timewindow: 15m
      client:
        connTimeout: 3s
      deliveryclient:
        connTimeout: 3s
        reConnectBackoffThreshold: 3600s
        reconnectTotalTimeThreshold: 3600s
      discovery:
        authCacheEnabled: true
        authCacheMaxSize: 1000
        authCachePurgeRetentionRatio: 0.75
        enabled: true
        orgMembersAllowedAccess: false
      fileSystemPath: /var/hyperledger/production
      gomaxprocs: -1
      gossip:
        aliveExpirationTimeout: 25s
        aliveTimeInterval: 5s
        bootstrap: 127.0.0.1:7051
        connTimeout: 2s
        dialTimeout: 3s
        digestWaitTime: 1s
        election:
          leaderAliveThreshold: 10s
          leaderElectionDuration: 5s
          membershipSampleInterval: 1s
          startupGracePeriod: 15s
        endpoint: null
        externalEndpoint: org-2-peer-1-hlf-peer.org-2:7051
        maxBlockCountToStore: 100
        maxPropagationBurstLatency: 10ms
        maxPropagationBurstSize: 10
        membershipTrackerInterval: 5s
        orgLeader: 'false'
        propagateIterations: 1
        propagatePeerNum: 3
        publishCertPeriod: 10s
        publishStateInfoInterval: 4s
        pullInterval: 4s
        pullPeerNum: 3
        pvtData:
          btlPullMargin: 10
          pullRetryThreshold: 60s
          pushAckTimeout: 3s
          reconcileBatchSize: 10
          reconcileSleepInterval: 1m
          reconciliationEnabled: true
          transientstoreMaxBlockRetention: 1000
        reconnectInterval: 25s
        recvBuffSize: 20
        requestStateInfoInterval: 4s
        requestWaitTime: 1500ms
        responseWaitTime: 2s
        sendBuffSize: 200
        skipBlockVerification: false
        skipHandshake: 'true'
        stateInfoRetentionInterval: null
        useLeaderElection: 'true'
      handlers:
        authFilters:
        - name: DefaultAuth
        - name: ExpirationCheck
        decorators:
        - name: DefaultDecorator
        endorsers:
          escc:
            library: null
            name: DefaultEndorsement
        validators:
          vscc:
            library: null
            name: DefaultValidation
      id: MyOrg2
      keepalive:
        client:
          interval: 60s
          timeout: 20s
        deliveryClient:
          interval: 60s
          timeout: 20s
        minInterval: 60s
      listenAddress: 0.0.0.0:7051
      localMspId: MyOrg2MSP
      localMspType: bccsp
      mspConfigPath: /var/hyperledger/admin_msp
      networkId: dev
      profile:
        enabled: false
        listenAddress: 0.0.0.0:6060
      tls:
        enabled: 'true'
        cert:
          file: /var/hyperledger/tls/server/pair/tls.crt
        key:
          file: /var/hyperledger/tls/server/pair/tls.key
        clientAuthRequired: 'true'
        clientCert:
          file: /var/hyperledger/tls/client/pair/tls.crt
        clientKey:
          file: /var/hyperledger/tls/client/pair/tls.key
        clientRootCAs:
        - /var/hyperledger/admin_msp/cacerts/cacert.pem
        rootcert:
          file: /var/hyperledger/admin_msp/cacerts/cacert.pem
      validatorPoolSize: null
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: org-2-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-2-peer-1"
    chart: hlf-couchdb-2.0.1
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: hlf-k8s/templates/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: org-2-peer-1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs:
    - get
    - watch
    - list
    - create
    - delete
---
# Source: hlf-k8s/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: org-2-peer-1-hlf-k8s
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
    app.kubernetes.io/part-of: hlf-k8s
subjects:
- kind: ServiceAccount
  name: org-2-peer-1-hlf-k8s
  namespace: org-2
roleRef:
  kind: Role
  name: org-2-peer-1-hlf-k8s
  apiGroup: rbac.authorization.k8s.io
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-2-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-2-peer-1"
    chart: hlf-couchdb-2.0.1
spec:
  type: ClusterIP
  ports:
    - port: 5984
      targetPort: couchdb
      protocol: TCP
      name: couchdb
  selector:
    app: hlf-couchdb
    release: org-2-peer-1
---
# Source: hlf-k8s/charts/hlf-peer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-2-peer-1-hlf-peer
  labels:
    app: hlf-peer
    heritage: "Helm"
    release: "org-2-peer-1"
    chart: hlf-peer-5.0.0
spec:
  type: ClusterIP
  ports:
    - port: 7051
      targetPort: 7051
      protocol: TCP
      name: request
    - port: 7053
      targetPort: 7053
      protocol: TCP
      name: event
  selector:
    app: hlf-peer
    release: org-2-peer-1
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-2-peer-1-hlf-k8s-appchannel-operator-mychannel
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/name: hlf-k8s-appchannel-operator-mychannel
    app.kubernetes.io/instance: org-2-peer-1
---
# Source: hlf-k8s/templates/deployment-chaincode.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-2-peer-1-hlf-k8s-chaincode-basic
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s-chaincode-basic
spec:
  type: ClusterIP
  ports:
  - name: chaincode
    port: 7052
    protocol: TCP
    targetPort: 7052
  selector:
    app.kubernetes.io/name: hlf-k8s-chaincode-basic
    app.kubernetes.io/instance: org-2-peer-1
---
# Source: hlf-k8s/templates/deployment-config-operator.yaml
apiVersion: v1
kind: Service
metadata:
  name: org-2-peer-1-hlf-k8s-config-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/name: hlf-k8s-config-operator
    app.kubernetes.io/instance: org-2-peer-1
---
# Source: hlf-k8s/charts/hlf-couchdb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-2-peer-1-hlf-couchdb
  labels:
    app: hlf-couchdb
    heritage: "Helm"
    release: "org-2-peer-1"
    chart: hlf-couchdb-2.0.1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-couchdb
      release: org-2-peer-1
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-couchdb
        heritage: "Helm"
        release: "org-2-peer-1"
        chart: hlf-couchdb-2.0.1
    spec:
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: org-2-peer-1-hlf-couchdb
      containers:
        - name: hlf-couchdb
          image: "us-central1-docker.pkg.dev/blockedge-381408/hlf-img/couchdb:1"
          imagePullPolicy: IfNotPresent
          envFrom:
          - secretRef:
              name: org-2-peer-1-hlf-couchdb
          volumeMounts:
          - mountPath: /opt/couchdb/data
            name: data
          ports:
            - name: couchdb
              containerPort: 5984
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5984
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: 5984
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            {}
---
# Source: hlf-k8s/charts/hlf-peer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-2-peer-1-hlf-peer
  labels:
    app: hlf-peer
    heritage: "Helm"
    release: "org-2-peer-1"
    chart: hlf-peer-5.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-peer
      release: org-2-peer-1
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-peer
        heritage: "Helm"
        release: "org-2-peer-1"
        chart: hlf-peer-5.0.0
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: dockersocket
          hostPath:
            path: /var/run/docker.sock
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
      containers:
        - name: peer
          image: "us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-peer:1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: request
              containerPort: 7051
              protocol: TCP
            - name: event
              containerPort: 7053
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 5
            periodSeconds: 5
          # TODO: Improve readiness probe (ideally `ps aux | awk '$11=="orderer"'`)
          readinessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 15
          command:
            - sh
            - -c
            - |
              # To avoid having separate secrets for CouchDB and HLF
              export CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=$COUCHDB_USER
              export CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=$COUCHDB_PASSWORD

              while [ ! -d /var/hyperledger/admin_msp/admincerts ] || [ -z "$(ls -A /var/hyperledger/admin_msp/admincerts)" ];
              do
                echo "\033[0;31m /var/hyperledger/admin_msp/admincerts must contain Peer admin certificates files \033[0m"
                sleep 60
              done

              while [ ! -d ${CORE_PEER_MSPCONFIGPATH}/signcerts ];
              do
                echo "\033[0;31m ${CORE_PEER_MSPCONFIGPATH}/signcerts directory must exist \033[0m"
                sleep 60
              done

              if [ ! -d ${FABRIC_CFG_PATH} ]
              then
                mkdir -p ${FABRIC_CFG_PATH}
                cp -r /etc/hyperledger/fabric/core.yaml ${FABRIC_CFG_PATH}
                ls ${FABRIC_CFG_PATH}
              fi

              if [ $CORE_PEER_TLS_CLIENTAUTHREQUIRED ]
              then
                export CORE_PEER_TLS_CLIENTROOTCAS_FILES=$(ls -d $CORE_PEER_TLS_CLIENTROOTCAS_FILES)
              fi

              echo ">\033[0;35m peer node start \033[0m"
              peer node start
          envFrom:
            - secretRef:
                name: org-2-peer-1-hlf-couchdb
            - configMapRef:
                name: org-2-peer-1-hlf-peer--peer
          volumeMounts:
            - mountPath: /var/hyperledger
              name: data
            - mountPath: /host/var/run/docker.sock
              name: dockersocket
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
          resources:
            {}
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-2-peer-1-hlf-k8s-appchannel-operator-mychannel
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-appchannel-operator-mychannel
        app.kubernetes.io/instance: org-2-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-appchannel-operator-mychannel
        app.kubernetes.io/instance: org-2-peer-1
    spec:
      serviceAccountName: org-2-peer-1-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer (orderer1-hlf-ord.orderer:7050)\n"
            until $(nc -z orderer1-hlf-ord.orderer 7050); do
              printf "[DEBUG] Orderer (orderer1-hlf-ord.orderer:7050) is not reacheable, retry in 5s\n"
              sleep 5
            done

            ## Add orgs to the application channel
            while true; do

              ## Create and join application channel
              until grep -e "existing.*mychannel" -e "FORBIDDEN" channel.created > /dev/null; do

                printf "[DEBUG] Create and join the application channel (mychannel)\n"

                ## Create channel
                configtxgen -profile OrgsChannel-mychannel --outputCreateChannelTx channel.tx -channelID mychannel -asOrg MyOrg2
                peer channel create -f channel.tx \
                  --outputBlock channel.block \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 2> channel.created

                ## Create and add anchor
                configtxgen -profile OrgsChannel-mychannel --outputAnchorPeersUpdate anchor.tx -channelID mychannel -asOrg MyOrg2

                peer channel update \
                  -f anchor.tx \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                sleep 1
              done

              ## Join Application Channel
              ## Fetch channel list

              peer channel list \
                --tls \
                --clientauth \
                --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                --keyfile /var/hyperledger/tls/client/pair/tls.key \
                --certfile /var/hyperledger/tls/client/pair/tls.crt \
                -o orderer1-hlf-ord.orderer:7050 > channel.list

              until grep "mychannel" channel.list > /dev/null; do

                printf "[DEBUG] Fetching application channel block\n"
                peer channel fetch oldest channeljoin.block \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                printf "[DEBUG] Joining channel\n"
                peer channel join -b channeljoin.block

                ## Fetch channel list
                peer channel list \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 > channel.list

                sleep 1
              done


              ## Add organizations to application channel

              while IFS=" " read -r org mspid configUrl ; do

                ## Delete stale channel configuration files
                rm -rf \
                  channel.block \
                  channel-cfg.block \
                  channel-cfg.json


                ## Fetch up-to-date channel configuration block
                until [ -f "channel.block" ] && [ -s "channel.block" ]; do
                  printf "[DEBUG] Fetching the channel (mychannel) configuration block\n"
                  peer channel fetch config channel.block \
                    -c mychannel \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > /tmp/out.txt 2>&1 || cat /tmp/out.txt
                  sleep 3
                done

                ## Check if update has been already sent
                printf "[DEBUG] Check if $org is in the application channel \n"
                configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-$org-hasjoined.json
                if grep "$mspid" channel-$org-hasjoined.json > /dev/null; then
                  printf "[DEBUG] $org is already in the application channel\n"
                  rm -f /data/proposal-$org.pb
                  sleep 5
                  continue
                else
                  printf "[DEBUG] $org is not in the application channel\n"
                  ## Remove all configuration files because of edge cases (network issue, proposal issue).
                  ## We prefer to delete all and retry all steps to avoid side effect.
                  rm -f *-$org.*
                fi

                ## Fetch organization configuration
                if ! [ -s "configOrg-$org.json" ]; then
                  printf "[DEBUG] Fetch the organization ($org) configuration from $configUrl\n"
                  curl --fail -L --output ./configOrg-$org.json $configUrl || continue # continue to next org if curl fails

                  if [ -s "configOrg-$org.json" ]; then
                    printf "[DEBUG] Extract tls root certificate from the organization ($org) configuration file \n"
                    jq -r .values.MSP.value.config.tls_root_certs[0] ./configOrg-$org.json | base64 -d > tlsRootCert-$org.crt

                    printf "[DEBUG] Add the organization ($org) for endorsement \n"
                    PEER_HOST=$(jq -r .values.AnchorPeers.value.anchor_peers[0].host configOrg-$org.json)
                    PEER_PORT=$(jq -r .values.AnchorPeers.value.anchor_peers[0].port configOrg-$org.json)
                    grep -qxF -e "--peerAddresses ${PEER_HOST}:${PEER_PORT} --tlsRootCertFiles tlsRootCert-$org.crt" endorsement.config || echo "--peerAddresses ${PEER_HOST}:${PEER_PORT} --tlsRootCertFiles tlsRootCert-$org.crt" >> endorsement.config
                  fi
                fi

                ## Extract application channel configuration
                until [ -f "channel-cfg.block" ] && [ -s "channel-cfg.block" ]; do
                  configtxlator proto_decode --input channel.block --type common.Block | jq .data.data[0].payload.data.config > channel-cfg.json
                  configtxlator proto_encode --input channel-cfg.json --type common.Config --output channel-cfg.block
                  sleep 2
                done


                ## Fetch update proposal from external orgs if exists
                while IFS=" " read -r orgProposal mspidProposal proposalServerUrl ; do

                  # Don't need to network-fetch proposals made by ourselves
                  if [ "$orgProposal" = "MyOrg2" ]; then continue; fi

                  printf "[DEBUG] Fetch the update proposal built by organization ($orgProposal) for organization ($org) from $proposalServerUrl/proposal-$org.pb \n"
                  curl --fail -L --output ./external-$orgProposal-proposal-$org.pb $proposalServerUrl/proposal-$org.pb

                  ## Compare external proposal file with local one, keep the largest (more signatures) between them as the only difference will be the number of signatures
                  if [ -s "external-$orgProposal-proposal-$org.pb" ]
                  then
                    if [ -s "proposal-$org.pb" ] ; then
                      if [ $(stat -c %s "external-$orgProposal-proposal-$org.pb") -gt $(stat -c %s "proposal-$org.pb") ] ; then
                        printf "[DEBUG] Use the $org update proposal from $orgProposal as there are more signatures in it !\n"
                        cp external-$orgProposal-proposal-$org.pb proposal-$org.pb
                      fi
                    else
                      printf "[DEBUG] Use the $org update proposal from $orgProposal \n"
                      cp external-$orgProposal-proposal-$org.pb proposal-$org.pb
                    fi
                  fi

                done < /proposal/application-proposal-organizations

                ## Create proposal if not fetched
                until [ -f "proposal-$org.pb" ]; do
                  printf "[DEBUG] Create application channel update for $org \n"

                  ## Add the Organization in the Applciation group
                  jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups":{"'$org'":.[1]}}}}}' channel-cfg.json configOrg-$org.json > new-channel-cfg-$org.json
                  configtxlator proto_encode --input new-channel-cfg-$org.json --type common.Config --output channelupdate-$org.block

                  ## Compute update between channel old configuration and the updated one
                  configtxlator compute_update \
                    --channel_id mychannel \
                    --original channel-cfg.block \
                    --updated channelupdate-$org.block \
                    | configtxlator proto_decode --type common.ConfigUpdate | jq . > compute_update-$org.json

                  ## Create the update proposal
                  echo '{"payload":{"header":{"channel_header":{"channel_id": "mychannel", "type":2}},"data":{"config_update":'$(cat compute_update-$org.json)'}}}' | jq . > proposal-$org.json
                  configtxlator proto_encode --input proposal-$org.json --type common.Envelope --output proposal-$org.pb

                  sleep 2
                done

                ## Validate proposal application version
                PROPOSAL_APP_VERSION=$(cat channel-cfg.json | jq '.channel_group.groups.Application.version')
                CHANNEL_APP_VERSION=$(configtxlator proto_decode --input proposal-$org.pb --type common.Envelope | jq '.payload.data.config_update.read_set.groups.Application.version')
                printf "[DEBUG] Proposal application version: $CHANNEL_APP_VERSION. Channel application version: $PROPOSAL_APP_VERSION\n"
                if [ $CHANNEL_APP_VERSION != $PROPOSAL_APP_VERSION ] ; then
                  # Proposal update should have a readset application version matching config application version.
                  # That suggests the proposal update is not up to date with the latest ledger state.
                  printf "[DEBUG] Application version mismatch. Delete proposal for '$org'.\n"
                  rm -f /data/proposal-$org.pb proposal-$org.pb
                  continue
                fi

                ## Sign update proposal
                peer channel signconfigtx \
                  -f proposal-$org.pb \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                ## Update proposal in /data
                cp proposal-$org.pb /data/proposal-$org.pb
                chmod +r /data/proposal-$org.pb

                ## Submit proposal
                NUM_SIGNATURES=$(configtxlator proto_decode --input proposal-$org.pb --type common.Envelope | jq '.payload.data.signatures | map(.signature_header.creator.mspid) | unique | length')
                NUM_APPLICATION_ORGS=$(wc -l /proposal/application-proposal-organizations | cut -c 1)
                printf "[DEBUG] Submit channel update for '$org' with $NUM_SIGNATURES signatures (out of $NUM_APPLICATION_ORGS organizations)\n"
                peer channel update \
                  -f proposal-$org.pb \
                  -c mychannel \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050

                sleep 5

              done < /config/application-organizations


              ## CHAINCODES

              
              
                  - 

              

              ## Wait readiness: basic

              while true; do

                # Chaincode commit
                printf "[DEBUG] Wait chaincode ready basic 1.0 on channel mychannel\n"

                peer lifecycle chaincode checkcommitreadiness \
                  --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                  --channelID mychannel \
                  --name basic \
                  --version 1.0 \
                  --sequence 1 \
                  --init-required \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 > chaincode.basic.ready 2>&1

                if ! grep "false" chaincode.basic.ready > /dev/null; then
                  break
                fi

                sleep 5

              done

              ## Commit chaincode basic

              peer lifecycle chaincode querycommitted --channelID mychannel > chaincode.basic.list 2>&1

              if ! grep "basic" chaincode.basic.list | grep "1.0" > /dev/null; then

                # Chaincode commit
                printf "[DEBUG] Commit chaincode basic 1.0 on channel mychannel\n"

                ENDORSEMENT=$(cat endorsement.config| tr '\n' ' ')

                peer lifecycle chaincode commit \
                  --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                  --channelID mychannel \
                  --name basic \
                  --version 1.0 \
                  --sequence 1 --init-required \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 \
                  $ENDORSEMENT > chaincode.basic.commit 2>&1

                cat chaincode.basic.commit

                peer lifecycle chaincode querycommitted --channelID mychannel > chaincode.basic.list 2>&1

                sleep 5

              fi

              ## Init chaincode basic

              if [[ ! -e chaincode.basic.init ]]; then
                  touch chaincode.basic.init
              fi

              if ! grep "already initialized" chaincode.basic.init > /dev/null; then

                printf "[DEBUG] Init chaincode basic 1.0 on channel mychannel\n"

                peer chaincode invoke --isInit \
                  --channelID mychannel \
                  --name basic \
                  --tls \
                  --clientauth \
                  --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                  --keyfile /var/hyperledger/tls/client/pair/tls.key \
                  --certfile /var/hyperledger/tls/client/pair/tls.crt \
                  -o orderer1-hlf-ord.orderer:7050 \
                  -c '{"Args":["Init"]}' > chaincode.basic.init 2>&1

                sleep 5

              fi

              
              

              sleep 10

            done
        resources:
              null
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        - name: GODEBUG
          value: "netdns=go+1"
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: application-organizations
            readOnly: true
          - mountPath: /proposal
            name: application-proposal-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/tls/ord/cert
            name: ord-tls-rootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          - mountPath: /data
            name: data
      - name: nginx
        image: nginx:1.17.6
        ports:
        - containerPort: 80
        volumeMounts:
          - mountPath: /usr/share/nginx/html/proposal
            name: data
      volumes:
        - name: application-organizations
          configMap:
            name: org-2-peer-1-hlf-k8s-application-organizations-mychannel
        - name: application-proposal-organizations
          configMap:
            name: org-2-peer-1-hlf-k8s-application-proposal-organizations-mychannel
        - name: fabric-config
          configMap:
            name: org-2-peer-1-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
        - name: data
          emptyDir: {}
---
# Source: hlf-k8s/templates/deployment-chaincode-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-2-peer-1-hlf-k8s-chaincode-operator-basic
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s-chaincode-operator-basic
    app.kubernetes.io/part-of: org-2-peer-1
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-chaincode-operator
        app.kubernetes.io/instance: org-2-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-chaincode-operator
        app.kubernetes.io/instance: org-2-peer-1
    spec:
      serviceAccountName: org-2-peer-1-hlf-k8s
      containers:
        - name: fabric-tools
          image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
          imagePullPolicy: "IfNotPresent"
          command: ['bash', '-c']
          args:
            - |
              ## Update CA certs
              update-ca-certificates

              ## Check connection with the Peer
              printf "[DEBUG] Testing the connection with the Peer (org-2-peer-1-hlf-peer.org-2:7051)\n"
              until $(nc -z org-2-peer-1-hlf-peer.org-2 7051); do
                printf "[DEBUG] Peer (org-2-peer-1-hlf-peer.org-2:7051) is not reacheable, retry in 5s\n"
                sleep 5
              done

              ## Check connection with the Orderer
              printf "[DEBUG] Testing the connection with the Orderer (orderer1-hlf-ord.orderer:7050)\n"
              until $(nc -z orderer1-hlf-ord.orderer 7050); do
                printf "[DEBUG] Orderer (orderer1-hlf-ord.orderer:7050) is not reacheable, retry in 5s\n"
                sleep 5
              done


              ## Install chaincode

              while true; do

                peer lifecycle chaincode queryinstalled -O json > chaincode.list 2>/dev/null

                while ! [ -s chaincode.list ]; do
                  printf "[DEBUG] chaincode.list file is empty, retry in 5s\n"
                  sleep 5
                  peer lifecycle chaincode queryinstalled -O json > chaincode.list 2>/dev/null
                done

                until jq -e '.installed_chaincodes[] | select(.label=="basic")' chaincode.list > /dev/null; do
                  printf "[DEBUG] Chaincode basic not installed\n"
                  printf "[DEBUG] Installing chaincode basic\n"

                  ## Clean potential remaining artifacts
                  rm -f code.tar.gz chaincode.tgz connection.json metadata.json

                  printf "[DEBUG] Generate connection.json for basic\n"

                  echo "{
                  \"address\": \"org-2-peer-1-hlf-k8s-chaincode-basic.org-2:7052\",
                  \"dial_timeout\": \"10s\",
                  \"tls_required\": true,
                  \"client_auth_required\": true,
                  \"client_key\": \"$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /var/hyperledger/tls/client/pair/tls.key)\",
                  \"client_cert\": \"$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /var/hyperledger/tls/client/pair/tls.crt)\",
                  \"root_cert\": \"$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /var/hyperledger/tls/client/cert/cacert.pem)\"
                  }" > connection.json

                  cat connection.json

                  printf "[DEBUG] Archive connection.json to code.tar.gz for basic\n"
                  tar cfz code.tar.gz connection.json

                  printf "[DEBUG] Generate metadata.json for basic\n"
                  echo '{"path":"", "type":"external", "label":"basic"}' > metadata.json

                  printf "[DEBUG] Archive  code.tar.gz and metadata.json to chaincode.tgz for basic\n"
                  tar cfz chaincode.tgz code.tar.gz metadata.json

                  ## Install chaincode
                  printf "[DEBUG] Install chaincode basic\n"
                  peer lifecycle chaincode install chaincode.tgz 2>/dev/null


                  peer lifecycle chaincode queryinstalled -O json > chaincode.list 2>/dev/null

                  if  jq -e '.installed_chaincodes[] | select(.label=="basic")' chaincode.list > /dev/null; then
                    CHAINCODE_CCID=$(jq '.installed_chaincodes[] | select(.label=="basic")' chaincode.list | jq -r .package_id)
                    printf "[DEBUG] Chaincode basic installed with ccid : ${CHAINCODE_CCID}\n"
                  fi

                  sleep 10
                done

                CHAINCODE_CCID=$(jq '.installed_chaincodes[] | select(.label=="basic")' chaincode.list | jq -r .package_id)

                until kubectl get secret chaincode-ccid-basic-1.0 > /dev/null; do
                    printf "[DEBUG] Create chaincode ccid secret for basic 1.0\n"
                    kubectl create secret generic chaincode-ccid-basic-1.0 --from-literal=ccid=$CHAINCODE_CCID
                done


                ## Approve chaincode

                

                until grep -q "${CHAINCODE_CCID}" chaincode_basic_1.0_mychannel.approve; do

                  printf "[DEBUG] Approving chaincode basic 1.0 with ccid ${CHAINCODE_CCID} on channel mychannel\n"

                  peer lifecycle chaincode approveformyorg \
                    --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                    --channelID mychannel \
                    --name basic \
                    --version 1.0 \
                    --package-id $CHAINCODE_CCID \
                    --sequence 2  \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > /dev/null 2>&1

                  peer lifecycle chaincode queryapproved \
                    --channelID mychannel \
                    --name basic \
                    --sequence 2 \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > chaincode_basic_1.0_mychannel.approve 2>&1

                  if ! grep -q "${CHAINCODE_CCID}" chaincode_basic_1.0_mychannel.approve; then
                    printf "[DEBUG] Chaincode basic 1.0 with ccid ${CHAINCODE_CCID} is not approved on channel \n"
                    sleep 5
                  fi

                done


                ## Check chaincode commit readiness
                ## chaincode must be commit ready or, if already committed, return an ask for new definition sequence

                until grep -q -e "true" -e "new definition must be sequence" chaincode_basic_1.0_mychannel.ready; do

                  printf "[DEBUG] Check chaincode readiness basic 1.0 on channel mychannel\n"

                  peer lifecycle chaincode checkcommitreadiness \
                    --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                    --channelID mychannel \
                    --name basic \
                    --version 1.0 \
                    --sequence 2 \
                    --tls \
                    --clientauth \
                    --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                    --keyfile /var/hyperledger/tls/client/pair/tls.key \
                    --certfile /var/hyperledger/tls/client/pair/tls.crt \
                    -o orderer1-hlf-ord.orderer:7050 > chaincode_basic_1.0_mychannel.ready 2>&1

                  sleep 5

                done


                ## Commit chaincode

                peer lifecycle chaincode querycommitted --channelID mychannel > chaincode_basic_1.0_mychannel.committed 2>&1

                if ! grep "Name: basic" chaincode_basic_1.0_mychannel.committed | grep "Version: 1.0" | grep -q "Sequence: 2"; then

                  # Chaincode commit
                  printf "[DEBUG] Commit chaincode basic 1.0 on channel mychannel\n"

                  DISCOVERY_PEER=$(discover peers --channel=mychannel --server=org-2-peer-1-hlf-peer.org-2:7051 --tlsKey=/var/hyperledger/tls/client/pair/tls.key --tlsCert=/var/hyperledger/tls/client/pair/tls.crt --peerTLSCA=/var/hyperledger/tls/client/cert/cacert.pem --userKey=/var/hyperledger/msp/keystore/key.pem --userCert=/var/hyperledger/msp/signcerts/cert.pem --MSP MyOrg2MSP)
                  DISCOVERY_CONFIG=$(discover config --channel=mychannel --server=org-2-peer-1-hlf-peer.org-2:7051 --tlsKey=/var/hyperledger/tls/client/pair/tls.key --tlsCert=/var/hyperledger/tls/client/pair/tls.crt --peerTLSCA=/var/hyperledger/tls/client/cert/cacert.pem --userKey=/var/hyperledger/msp/keystore/key.pem --userCert=/var/hyperledger/msp/signcerts/cert.pem --MSP MyOrg2MSP)

                  ENDORSEMENT="";

                  while read -r mspId; do
                      TLS_ROOT_CERT=$(echo "$DISCOVERY_CONFIG" | jq -r ".msps | .\"${mspId}\" | .tls_root_certs[0]");
                      ENDPOINT=$(echo "$DISCOVERY_PEER" | jq -r ".[] | select( .MSPID == \"$mspId\" ) | .Endpoint");
                      echo "${TLS_ROOT_CERT}" | base64 -d > "tlsroot-${mspId}.crt";
                      ENDORSEMENT="${ENDORSEMENT} --peerAddresses=${ENDPOINT} --tlsRootCertFiles=tlsroot-${mspId}.crt";
                  done < <(echo "$DISCOVERY_PEER" | jq -r '.[].MSPID')

                  peer lifecycle chaincode commit \
                      --signature-policy "OR('MyOrg1MSP.member','MyOrg2MSP.member')" \
                      --channelID mychannel \
                      --name basic \
                      --version 1.0 \
                      --sequence 2 \
                      --tls \
                      --clientauth \
                      --cafile /var/hyperledger/tls/ord/cert/cacert.pem \
                      --keyfile /var/hyperledger/tls/client/pair/tls.key \
                      --certfile /var/hyperledger/tls/client/pair/tls.crt \
                      -o orderer1-hlf-ord.orderer:7050 \
                      $ENDORSEMENT > chaincode_basic_1.0_mychannel.commit 2>&1

                  cat chaincode_basic_1.0_mychannel.commit

                  peer lifecycle chaincode querycommitted --channelID mychannel > chaincode_basic_1.0_mychannel.committed 2>&1

                  sleep 5

                fi

                sleep 10
              done
          resources:
              null
          env:
          - name: CORE_PEER_MSPCONFIGPATH
            value: /var/hyperledger/admin_msp
          - name: GODEBUG
            value: "netdns=go+1"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric
              name: fabric-config
              readOnly: true
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /data
              name: data
      volumes:
      - name: fabric-config
        configMap:
          name: org-2-peer-1-hlf-k8s-fabric
      - name: id-cert
        secret:
          secretName: hlf-msp-cert-user
      - name: id-key
        secret:
          secretName: hlf-msp-key-user
      - name: cacert
        secret:
          secretName: hlf-cacert
      - name: tls
        secret:
          secretName: hlf-tls-admin
      - name: tls-rootcert
        secret:
          secretName: hlf-cacert
      - name: tls-client
        secret:
          secretName: hlf-tls-user
      - name: tls-clientrootcert
        secret:
          secretName: hlf-cacert
      - name: admin-cert
        secret:
          secretName: hlf-msp-cert-admin
      - name: admin-key
        secret:
          secretName: hlf-msp-key-admin
      - name: ord-tls-rootcert
        secret:
          secretName: ord-tls-rootcert
      - name: data
        emptyDir: {}
---
# Source: hlf-k8s/templates/deployment-chaincode.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-2-peer-1-hlf-k8s-chaincode-basic
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s-chaincode
    app.kubernetes.io/part-of: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-chaincode-basic
        app.kubernetes.io/instance: org-2-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-chaincode-basic
        app.kubernetes.io/instance: org-2-peer-1
    spec:
      containers:
        - name: substra-chaincode-basic
          image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/basic:2
          imagePullPolicy: "IfNotPresent"
          # command: ['./chaincode']
          command: [  ]
          env:
            - name: CHAINCODE_CCID
              valueFrom:
                secretKeyRef:
                  name: chaincode-ccid-basic-1.0
                  key: ccid
            - name: CHAINCODE_ADDRESS
              value: "0.0.0.0:7052"
            - name: TLS_CERT_FILE
              value: "/var/hyperledger/tls/client/pair/tls.crt"
            - name: TLS_KEY_FILE
              value: "/var/hyperledger/tls/client/pair/tls.key"
            - name: TLS_ROOTCERT_FILE
              value: "/var/hyperledger/tls/client/cert/cacert.pem"
          volumeMounts:
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
          ports:
            - containerPort: 7052
      volumes:
      - name: tls-client
        secret:
          secretName: hlf-tls-user
      - name: tls-clientrootcert
        secret:
          secretName: hlf-cacert
---
# Source: hlf-k8s/templates/deployment-config-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-2-peer-1-hlf-k8s-config-operator
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-config-operator
        app.kubernetes.io/instance: org-2-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-config-operator
        app.kubernetes.io/instance: org-2-peer-1
    spec:
      serviceAccountName: org-2-peer-1-hlf-k8s
      containers:
        - name: fabric-tools
          image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args:
            - |
              ## Create configuration files (public keys) for the organization
              while true; do

                until [ -f "/data/configOrg.json" ]; do
                  printf "[DEBUG] Create the organization config file\n"
                  configtxgen -printOrg MyOrg2 > /data/configOrg.json
                  sleep 1
                done

                until [ -f "/data/configOrgWithAnchors.json" ]; do
                  printf "[DEBUG] Create the org config anchor file\n"
                  jq -s '.[0] * {"values":{"AnchorPeers":{"mod_policy":"Admins", "value":{"anchor_peers":[{"host":"org-2-peer-1-hlf-peer.org-2", "port":"7051"}]}, "version": "0"}}}' /data/configOrg.json > /data/configOrgWithAnchors.json
                  sleep 1
                done

                sleep 10
              done
          resources:
              null
          env:
          - name: CORE_PEER_MSPCONFIGPATH
            value: /var/hyperledger/admin_msp
          - name: GODEBUG
            value: "netdns=go+1"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric
              name: fabric-config
              readOnly: true
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/tlscacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
            - mountPath: /data
              name: data
        - name: nginx
          image: nginx:1.17.6
          ports:
          - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/config
              name: data
      volumes:
        - name: fabric-config
          configMap:
            name: org-2-peer-1-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
        - name: data
          emptyDir: {}
---
# Source: hlf-k8s/templates/deployment-monitor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-2-peer-1-hlf-k8s-discover-monitor-mychannel
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: org-2-peer-1
    helm.sh/chart: hlf-k8s-5.0.2
    app.kubernetes.io/name: hlf-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: hlf-k8s-discover-monitor-mychannel
        app.kubernetes.io/instance: org-2-peer-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hlf-k8s-discover-monitor-mychannel
        app.kubernetes.io/instance: org-2-peer-1
    spec:
      serviceAccountName: org-2-peer-1-hlf-k8s
      containers:
      - name: fabric-tools
        image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            while true; do
              printf "[DEBUG] Discover application channel: mychannel\n"
              discover --configFile /etc/hyperledger/fabric/discoverConfig.yaml peers --channel mychannel --server org-2-peer-1-hlf-peer.org-2:7051
              sleep 10
            done
        resources:
              null
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/tls/ord/cert
            name: ord-tls-rootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          - mountPath: /data
            name: data
      volumes:
        - name: fabric-config
          configMap:
            name: org-2-peer-1-hlf-k8s-fabric
        - name: id-cert
          secret:
            secretName: hlf-msp-cert-user
        - name: id-key
          secret:
            secretName: hlf-msp-key-user
        - name: cacert
          secret:
            secretName: hlf-cacert
        - name: tls
          secret:
            secretName: hlf-tls-admin
        - name: tls-rootcert
          secret:
            secretName: hlf-cacert
        - name: tls-client
          secret:
            secretName: hlf-tls-user
        - name: tls-clientrootcert
          secret:
            secretName: hlf-cacert
        - name: admin-cert
          secret:
            secretName: hlf-msp-cert-admin
        - name: admin-key
          secret:
            secretName: hlf-msp-key-admin
        - name: ord-tls-rootcert
          secret:
            secretName: ord-tls-rootcert
        - name: data
          emptyDir: {}
---
# Source: hlf-k8s/templates/configmap-application-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-application-proposal-organization.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/configmap-system-organizations.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-appchannel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-chaincode-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-enrollement-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-genesis-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-monitor.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-system-channel-operator.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/deployment-toolbox.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: hlf-k8s/templates/job-hook-delete-secrets.yaml
# # Copyright 2018 Owkin, inc.
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #      http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

#
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: org-2-peer-1-hlf-k8s-hook-delete-secrets
#   labels:
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/instance: org-2-peer-1
#     helm.sh/chart: hlf-k8s-5.0.2
#     app.kubernetes.io/name: hlf-k8s-hook-delete-secrets
#     app.kubernetes.io/part-of: hlf-k8s
#   annotations:
#     "helm.sh/hook": post-delete
#     "helm.sh/hook-delete-policy": hook-succeeded
#   namespace: "org-2"
# spec:
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: 
#       containers:
#       - name: fabric-tools
#         image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
#         imagePullPolicy: "IfNotPresent"
#         command: ['kubectl']
#         args:
#           - delete
#           - secrets
#           - -n
#           - org-2
#           - hlf-msp-cert-user
#           - hlf-msp-key-user
#           - hlf-cacert
#           - hlf-tls-admin
#           - hlf-tls-user
#           - hlf-cacert
#           - hlf-cacert
#           - hlf-msp-cert-admin
#           - hlf-msp-key-admin
#           - ord-tls-rootcert
#           - hlf-genesis
#           - --ignore-not-found=true
#           - --wait=true
#           - -v=4
#
#
#
#

#
#
# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: org-2-peer-1-hlf-k8s-hook-chaincode-delete-secrets
#   labels:
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/instance: org-2-peer-1
#     helm.sh/chart: hlf-k8s-5.0.2
#     app.kubernetes.io/name: hlf-k8s-hook-chaincode-delete-secrets
#     app.kubernetes.io/part-of: hlf-k8s
#   annotations:
#     "helm.sh/hook": post-delete
#     "helm.sh/hook-delete-policy": hook-succeeded
#   namespace: "org-2"
# spec:
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: 
#       containers:
#       - name: fabric-tools
#         image: us-central1-docker.pkg.dev/blockedge-381408/hlf-img/fabric-tools:1
#         imagePullPolicy: "IfNotPresent"
#         command: ['kubectl']
#         args:
#           - delete
#           - secrets
#           - -n
#           - org-2
#
#           - chaincode-ccid-basic
#
#           - --ignore-not-found=true
#           - --wait=true
#           - -v=4
#
#
#
#
#
---
# Source: hlf-k8s/templates/rbac.yaml
# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
