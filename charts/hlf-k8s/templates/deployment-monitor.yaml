# Copyright 2018 Owkin, inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- range .Values.appChannels }}
{{- if and (index $.Values "hlf-ord" "enabled") (index $.Values "hlf-ord" "monitor" "enabled") }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" $ }}-monitor-{{ .channelName }}
  labels:
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" $ }}
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" $ }}-monitor-{{ .channelName }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" $ }}-monitor-{{ .channelName }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
    spec:
      serviceAccountName: {{ template "substra.fullname" $ }}      
      containers:
      - name: fabric-tools
        image: {{ index $.Values "fabric-tools" "image" "repository" }}:{{ index $.Values "fabric-tools" "image" "tag" }}
        imagePullPolicy: "{{ index $.Values "fabric-tools" "image" "pullPolicy" }}"  
        # securityContext:
        #   capabilities:
        #     drop:
        #     - ALL
        #   readOnlyRootFilesystem: true
        #   runAsNonRoot: true
        #   runAsUser: 2000
        #   privileged: false              
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            ## Check connection with the Orderer
            printf "[DEBUG] Testing the connection with the Orderer ({{ index $.Values "hlf-ord" "host" }}:{{ index $.Values "hlf-ord" "port" }})\n"
            until $(nc -z {{ index $.Values "hlf-ord" "host" }} {{ index $.Values "hlf-ord" "port" }}); do
              printf "[DEBUG] Orderer ({{ index $.Values "hlf-ord" "host" }}:{{ index $.Values "hlf-ord" "port" }}) is not reacheable, retry in 3s\n"
              sleep 3
            done

            while true; do

              printf "[DEBUG] System channel: {{ $.Values.systemChannel.name }}\n"

              peer channel fetch config systemChannel.block \
                -c {{ $.Values.systemChannel.name }} \
                --tls \
                --clientauth \
                --cafile /var/hyperledger/tls/server/cert/cacert.pem \
                --keyfile /var/hyperledger/tls/client/pair/tls.key \
                --certfile /var/hyperledger/tls/client/pair/tls.crt \
                -o {{ index $.Values "hlf-ord" "host" }}:{{ index $.Values "hlf-ord" "port" }} > /tmp/out.txt 2>&1 || cat /tmp/out.txt

              configtxlator proto_decode --input systemChannel.block --type common.Block | jq '.data.data[0].payload.data.config.channel_group.groups.Consortiums.groups.SampleConsortium.groups | keys'

              printf "[DEBUG] Application channel: {{ .channelName }}\n"

              peer channel fetch config applicationChannel.block \
                -c {{ .channelName }} \
                --tls \
                --clientauth \
                --cafile /var/hyperledger/tls/server/cert/cacert.pem \
                --keyfile /var/hyperledger/tls/client/pair/tls.key \
                --certfile /var/hyperledger/tls/client/pair/tls.crt \
                -o {{ index $.Values "hlf-ord" "host" }}:{{ index $.Values "hlf-ord" "port" }} > /tmp/out.txt 2>&1 || cat /tmp/out.txt

              configtxlator proto_decode --input applicationChannel.block --type common.Block | jq '.data.data[0].payload.data.config.channel_group.groups.Application.groups | keys'

              sleep 10
            done
        resources:
          {{- toYaml $.Values.resources | nindent 14 }}
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /config
            name: system-organizations
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          {{- if $.Values.privateCa.enabled }}
          - mountPath: /usr/local/share/ca-certificates/{{ $.Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ $.Values.privateCa.configMap.fileName }}
          {{- end }}
      volumes:
        - name: system-organizations
          configMap:
            name: {{ template "substra.fullname" $ }}-system-organizations
        - name: fabric-config
          configMap:
            name: {{ template "substra.fullname" $ }}-fabric
        - name: id-cert
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "ord" "cert" }}
        - name: id-key
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "ord" "key" }}
        - name: cacert
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "ord" "caCert" }}
        - name: tls
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "ord" "tls" }}
        - name: tls-rootcert
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "ord" "tlsRootCert" }}
        - name: tls-client
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "ord" "tlsClient" }}
        - name: tls-clientrootcert
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "ord" "tlsClientRootCert" }}
        - name: admin-cert
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "adminCert" }}
        - name: admin-key
          secret:
            secretName: {{ index $.Values "hlf-ord" "secrets" "adminKey" }}
        {{- if $.Values.privateCa.enabled }}
        - name: private-ca
          configMap:
            name: {{ $.Values.privateCa.configMap.name }}
        {{- end }}
    {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
---
{{- end }}

{{- if and (index $.Values "hlf-peer" "enabled") (index $.Values "hlf-peer" "discover-monitor" "enabled") }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" $ }}-discover-monitor-{{ .channelName }}
  labels:
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" $ }}
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" $ }}-discover-monitor-{{ .channelName }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" $ }}-discover-monitor-{{ .channelName }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
    spec:
      serviceAccountName: {{ template "substra.fullname" $ }}
      containers:
      - name: nginx
        image: nginx:1.17.6
        ports:
          - containerPort: 5000
        volumeMounts:
          - mountPath: /usr/share/nginx/html/config
            name: data
      - name: fabric-tools
        image: {{ index $.Values "fabric-tools" "image" "repository" }}:{{ index $.Values "fabric-tools" "image" "tag" }}
        imagePullPolicy: "{{ index $.Values "fabric-tools" "image" "pullPolicy" }}"
        command: ['sh', '-c']
        args:
          - |
            ## Update CA certs
            update-ca-certificates

            while true; do
              printf "[DEBUG] Discover application channel: {{ .channelName }}\n"
              discover --configFile /etc/hyperledger/fabric/discoverConfig.yaml peers --channel {{ .channelName }} --server {{ index $.Values "hlf-peer" "host" }}:{{ index $.Values "hlf-peer" "port" }} > discoverpeerconfig.json
              ## log to stdout
              cat discoverpeerconfig.json
              discover --configFile /etc/hyperledger/fabric/discoverConfig.yaml config --channel {{ .channelName }} --server {{ index $.Values "hlf-peer" "host" }}:{{ index $.Values "hlf-peer" "port" }} > channelconfig.json

              ##### Start creating connection profile #####
              ## Set env for TLS
              CLIENT_TLS_PATH=/var/hyperledger/tls/client/pair/
              PEER_CA_CERT=/var/hyperledger/tls/server/cert/cacert.pem
              ## Create base of json
              jq --null-input \
                --arg clientKeyPem "$(awk 'NF {sub(/\r/, ""); printf "%s\n",$0;}' "${CLIENT_TLS_PATH}/tls.key")" \
                --arg clientCertPem "$(awk 'NF {sub(/\r/, ""); printf "%s\n",$0;}' "${CLIENT_TLS_PATH}/tls.crt")" \
            '{name: "{{ template "substra.fullname" $ }}", version: "{{ $.Chart.Name }}-{{ $.Chart.Version }}", client:{organization:"{{ $.Values.organization.id }}","connection":{"client":{"key": {"pem": $clientKeyPem}, "cert": {"pem":$clientCertPem}}}}}' > base.json

              ## Create peer object: Note as of this impl we only create the peer for "this" release because we dont have the other peers tls readily available. To make cp for all peers, pull in tls info
              cat discoverpeerconfig.json | jq '.[] | select( .MSPID == "{{ $.Values.organization.id }}" and (.Endpoint | contains("{{ index $.Values "hlf-peer" "host" }}"))) | {(.Endpoint[:-5] | rtrimstr("{{ substr (len $.Release.Name) (len (index $.Values "hlf-peer" "host")) (index $.Values "hlf-peer" "host") }}") ): {url: ("grpcs://"+.Endpoint)}}' | jq --slurp '.' > pre-peers.json

              ## Create peerlist
              peerList=$(cat discoverpeerconfig.json | jq '.[] | select( .MSPID == "{{ $.Values.organization.id }}" and (.Endpoint | contains("{{ index $.Values "hlf-peer" "host" }}"))) | (.Endpoint[:-5] | rtrimstr("{{ substr (len $.Release.Name) (len (index $.Values "hlf-peer" "host")) (index $.Values "hlf-peer" "host") }}") ) ' | jq --slurp -rc '.')

              ## Modify pre-peer object to add tlsCaCert with pem string resulting in peers.json
              cat pre-peers.json | jq --arg tlsCaPem "$(awk 'NF {sub(/\r/, ""); printf "%s\n",$0;}' "${PEER_CA_CERT}")" \
                '.[] | keys[] as $k |  .[$k] + {"tlsCACerts": {"pem": $tlsCaPem}} | {($k): .}'| jq '. | {peers : .}' > peers.json

              ## Create organziation object
              jq --null-input --arg orgName "{{ $.Values.organization.name }}" --arg mspId "{{ $.Values.organization.id }}" \
                --argjson peerList $peerList \
                '. |{organizations: {($mspId): {"mspid": $mspId, "peers": $peerList}}}' > org.json

              ## Setup orderers
              ## Orderer tls
              ORD_TLS_CACERT_PATH=/var/hyperledger/tls/ord/cert/cacert.pem

              ## Create orderer object -- TODO we can't get the orderer release name to utilize the cool substr above so we have to settle with hard code for rtrimstr
              cat channelconfig.json | jq --arg ordCaCertPem "$(awk 'NF {sub(/\r/, ""); printf "%s\n",$0;}' ${ORD_TLS_CACERT_PATH})" \
                '.orderers | keys[] as $k | .[$k].endpoint[] | {(.host): {tlsCACerts: {pem: $ordCaCertPem},mspid: $k,url: ("grpcs://"+.host+":"+(.port|tostring))}}' | jq -s 'add | {orderers: .}' > ords.json

              ## Get orderers list
              ordList=$(cat channelconfig.json | jq '.orderers | keys[] as $k | .[$k].endpoint[] | (.host )' | jq --slurp -rc '.')

              ## Create channel object
              jq --null-input --arg channelName "{{ .channelName }}" --argjson ordList $ordList --argjson peerList $peerList '. | {channels:{($channelName): {"orderers": $ordList, "peers": $peerList}}}' > channels.json

              ## join all json objects together to form cp
              jq -s '.[4] * .[1] * .[3] * .[0] * .[2]' ords.json org.json peers.json channels.json base.json > /data/connection-profile.json

              echo "Connection Profile:"
              cat /data/connection-profile.json
              sleep 60
            done
        resources:
          {{- toYaml $.Values.resources | nindent 14 }}
        env:
        - name: CORE_PEER_MSPCONFIGPATH
          value: /var/hyperledger/admin_msp
        volumeMounts:
          - mountPath: /etc/hyperledger/fabric
            name: fabric-config
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/tls/ord/cert
            name: ord-tls-rootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/tlscacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
          - mountPath: /data
            name: data
          {{- if $.Values.privateCa.enabled }}
          - mountPath: /usr/local/share/ca-certificates/{{ $.Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ $.Values.privateCa.configMap.fileName }}
          {{- end }}
      volumes:
        - name: fabric-config
          configMap:
            name: {{ template "substra.fullname" $ }}-fabric
        - name: id-cert
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "peer" "cert" }}
        - name: id-key
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "peer" "key" }}
        - name: cacert
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "peer" "caCert" }}
        - name: tls
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "peer" "tls" }}
        - name: tls-rootcert
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "peer" "tlsRootCert" }}
        - name: tls-client
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "peer" "tlsClient" }}
        - name: tls-clientrootcert
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "peer" "tlsClientRootCert" }}
        - name: admin-cert
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "adminCert" }}
        - name: admin-key
          secret:
            secretName: {{ index $.Values "hlf-peer" "secrets" "adminKey" }}
        - name: ord-tls-rootcert
          secret:
            secretName: {{ $.Values.secrets.ordTlsRootCert }}
        - name: data
          emptyDir: {}
        {{- if $.Values.privateCa.enabled }}
        - name: private-ca
          configMap:
            name: {{ $.Values.privateCa.configMap.name }}
        {{- end }}
    {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "substra.fullname" $ }}-monitor-{{ .channelName }}
  labels:
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" $ }}
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 5000
  selector:
    app.kubernetes.io/name: {{ template "substra.name" $ }}-discover-monitor-{{ .channelName }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
{{- end }}
{{- end }}
